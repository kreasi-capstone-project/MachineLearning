{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Import Semua Packages/Library yang Digunakan"
      ],
      "metadata": {
        "id": "lCXIw6GgfCoG"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2I1XtcEWe4sM"
      },
      "outputs": [],
      "source": [
        "# Import semua module yang digunakan\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from babel.numbers import format_currency\n",
        "from IPython.display import display\n",
        "sns.set(style='dark')\n",
        "from collections import Counter"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Wrangling"
      ],
      "metadata": {
        "id": "EsJfx5B1f6Hm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Gathering Data"
      ],
      "metadata": {
        "id": "SFXAJLR_f9w8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "url = \"https://raw.githubusercontent.com/ndy-nin/KreasiMLdata/refs/heads/main/data/Coursera.csv\"\n",
        "coursera_df = pd.read_csv(url)\n",
        "coursera_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 999
        },
        "id": "cUdAhWOgf83K",
        "outputId": "54132d23-9de7-4c18-cadd-0492a98e21fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     partner  \\\n",
              "0                     Google   \n",
              "1                     Google   \n",
              "2                     Google   \n",
              "3                     Google   \n",
              "4                     Google   \n",
              "...                      ...   \n",
              "1134            IIT Guwahati   \n",
              "1135      IE Business School   \n",
              "1136             IIT Roorkee   \n",
              "1137              IIT Bombay   \n",
              "1138  University of Illinois   \n",
              "\n",
              "                                                 course  \\\n",
              "0                                  Google Cybersecurity   \n",
              "1                                 Google Data Analytics   \n",
              "2                            Google Project Management:   \n",
              "3                 Google Digital Marketing & E-commerce   \n",
              "4                                     Google IT Support   \n",
              "...                                                 ...   \n",
              "1134  Post Graduate Certificate in Cloud Computing A...   \n",
              "1135         Business Essentials University Certificate   \n",
              "1136  Post Graduate Certificate in Strategic Supply ...   \n",
              "1137  Power Electronics and Motors for Electric Vehi...   \n",
              "1138  Entrepreneurship and Strategic Innovation Grad...   \n",
              "\n",
              "                                                 skills  rating reviewcount  \\\n",
              "0     {\" Network Security\",\" Python Programming\",\" L...     4.8       16.4k   \n",
              "1     {\" Data Analysis\",\" R Programming\",\" SQL\",\" Bu...     4.8      133.4k   \n",
              "2     {\" Project Management\",\" Strategy and Operatio...     4.8       97.3k   \n",
              "3     {\" Digital Marketing\",\" Marketing\",\" Marketing...     4.8       21.4k   \n",
              "4     {\" Computer Networking\",\" Network Architecture...     4.8      181.4k   \n",
              "...                                                 ...     ...         ...   \n",
              "1134                                                NaN     NaN         NaN   \n",
              "1135  {\" Strategy and Operations\",\" Leadership and M...     NaN         NaN   \n",
              "1136  {\" Machine Learning\",\" Python Programming\",\" R...     NaN         NaN   \n",
              "1137                                                NaN     NaN         NaN   \n",
              "1138  {\" Accounting\",\" Finance\",\" General Statistics...     NaN         NaN   \n",
              "\n",
              "          level             certificatetype        duration  crediteligibility  \n",
              "0     Beginner    Professional Certificate     3 - 6 Months              False  \n",
              "1     Beginner    Professional Certificate     3 - 6 Months               True  \n",
              "2     Beginner    Professional Certificate     3 - 6 Months               True  \n",
              "3     Beginner    Professional Certificate     3 - 6 Months              False  \n",
              "4     Beginner    Professional Certificate     3 - 6 Months               True  \n",
              "...         ...                         ...             ...                ...  \n",
              "1134        NaN     University Certificate    6 - 12 Months              False  \n",
              "1135        NaN     University Certificate    6 - 12 Months              False  \n",
              "1136        NaN     University Certificate    6 - 12 Months              False  \n",
              "1137        NaN     University Certificate    6 - 12 Months              False  \n",
              "1138        NaN       Graduate Certificate    6 - 12 Months               True  \n",
              "\n",
              "[1139 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d050509f-cf22-4f5f-bfb8-69ac0b2268d0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>partner</th>\n",
              "      <th>course</th>\n",
              "      <th>skills</th>\n",
              "      <th>rating</th>\n",
              "      <th>reviewcount</th>\n",
              "      <th>level</th>\n",
              "      <th>certificatetype</th>\n",
              "      <th>duration</th>\n",
              "      <th>crediteligibility</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Google</td>\n",
              "      <td>Google Cybersecurity</td>\n",
              "      <td>{\" Network Security\",\" Python Programming\",\" L...</td>\n",
              "      <td>4.8</td>\n",
              "      <td>16.4k</td>\n",
              "      <td>Beginner</td>\n",
              "      <td>Professional Certificate</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Google</td>\n",
              "      <td>Google Data Analytics</td>\n",
              "      <td>{\" Data Analysis\",\" R Programming\",\" SQL\",\" Bu...</td>\n",
              "      <td>4.8</td>\n",
              "      <td>133.4k</td>\n",
              "      <td>Beginner</td>\n",
              "      <td>Professional Certificate</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Google</td>\n",
              "      <td>Google Project Management:</td>\n",
              "      <td>{\" Project Management\",\" Strategy and Operatio...</td>\n",
              "      <td>4.8</td>\n",
              "      <td>97.3k</td>\n",
              "      <td>Beginner</td>\n",
              "      <td>Professional Certificate</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Google</td>\n",
              "      <td>Google Digital Marketing &amp; E-commerce</td>\n",
              "      <td>{\" Digital Marketing\",\" Marketing\",\" Marketing...</td>\n",
              "      <td>4.8</td>\n",
              "      <td>21.4k</td>\n",
              "      <td>Beginner</td>\n",
              "      <td>Professional Certificate</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Google</td>\n",
              "      <td>Google IT Support</td>\n",
              "      <td>{\" Computer Networking\",\" Network Architecture...</td>\n",
              "      <td>4.8</td>\n",
              "      <td>181.4k</td>\n",
              "      <td>Beginner</td>\n",
              "      <td>Professional Certificate</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1134</th>\n",
              "      <td>IIT Guwahati</td>\n",
              "      <td>Post Graduate Certificate in Cloud Computing A...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>University Certificate</td>\n",
              "      <td>6 - 12 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1135</th>\n",
              "      <td>IE Business School</td>\n",
              "      <td>Business Essentials University Certificate</td>\n",
              "      <td>{\" Strategy and Operations\",\" Leadership and M...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>University Certificate</td>\n",
              "      <td>6 - 12 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1136</th>\n",
              "      <td>IIT Roorkee</td>\n",
              "      <td>Post Graduate Certificate in Strategic Supply ...</td>\n",
              "      <td>{\" Machine Learning\",\" Python Programming\",\" R...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>University Certificate</td>\n",
              "      <td>6 - 12 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1137</th>\n",
              "      <td>IIT Bombay</td>\n",
              "      <td>Power Electronics and Motors for Electric Vehi...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>University Certificate</td>\n",
              "      <td>6 - 12 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1138</th>\n",
              "      <td>University of Illinois</td>\n",
              "      <td>Entrepreneurship and Strategic Innovation Grad...</td>\n",
              "      <td>{\" Accounting\",\" Finance\",\" General Statistics...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Graduate Certificate</td>\n",
              "      <td>6 - 12 Months</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1139 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d050509f-cf22-4f5f-bfb8-69ac0b2268d0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d050509f-cf22-4f5f-bfb8-69ac0b2268d0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d050509f-cf22-4f5f-bfb8-69ac0b2268d0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ce5eec12-5d76-4fab-aed5-2763b1547b45\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ce5eec12-5d76-4fab-aed5-2763b1547b45')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ce5eec12-5d76-4fab-aed5-2763b1547b45 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_13f14195-1987-4b88-918e-1ca1cb7173c7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('coursera_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_13f14195-1987-4b88-918e-1ca1cb7173c7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('coursera_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "coursera_df",
              "summary": "{\n  \"name\": \"coursera_df\",\n  \"rows\": 1139,\n  \"fields\": [\n    {\n      \"column\": \"partner\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 180,\n        \"samples\": [\n          \"SAP\",\n          \"University of Minnesota\",\n          \"National Academy of Sports Medicine\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"course\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1106,\n        \"samples\": [\n          \"Global Procurement and Sourcing\",\n          \"Essentials in Clinical Simulations Across the Health Professions\",\n          \"Python for Everybody\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"skills\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 977,\n        \"samples\": [\n          \"{\\\" Data Analysis\\\",\\\" Data Visualization\\\",\\\" Exploratory Data Analysis\\\",\\\" Process Analysis\\\",\\\" Databases\\\",\\\" Data Management\\\",\\\" Extract\\\",\\\" Transform\\\",\\\" Load\\\",\\\" Statistical Programming\\\",\\\" SQL\\\",\\\" Business Analysis\\\",\\\" Spreadsheet Software\\\",\\\" Operational Analysis\\\",\\\" Data Analysis Software\\\",\\\" Microsoft Excel\\\",\\\" Visualization (Computer Graphics)\\\",\\\" Communication\\\",\\\" Critical Thinking\\\",\\\" Interactive Data Visualization\\\",\\\" Programming Principles\\\",\\\" Statistical Visualization\\\",\\\" Collaboration\\\",\\\" Organizational Development\\\",\\\" Plot (Graphics)\\\",\\\" R Programming\\\",\\\" Strategy\\\",\\\" Tableau Software\\\",\\\" Storytelling\\\",\\\" Strategy and Operations\\\",\\\" Business Communication\\\",\\\" Graph Theory\\\",\\\" Project Management\\\",\\\" Data Structures\\\",\\\" Graphic Design\\\",\\\" Leadership and Management\\\",\\\" System Security\\\"}\",\n          \"{\\\" Machine Learning\\\",\\\" Machine Learning Algorithms\\\",\\\" Probability & Statistics\\\",\\\" Regression\\\",\\\" Applied Machine Learning\\\",\\\" Data Analysis\\\",\\\" Data Mining\\\",\\\" Deep Learning\\\",\\\" Algorithms\\\",\\\" Data Science\\\"}\",\n          \"{\\\" Deep Learning\\\",\\\" Machine Learning\\\",\\\" Tensorflow\\\",\\\" Artificial Neural Networks\\\",\\\" Applied Machine Learning\\\",\\\" Python Programming\\\",\\\" Machine Learning Algorithms\\\",\\\" Human Learning\\\",\\\" Computer Vision\\\",\\\" Computer Programming\\\",\\\" Network Model\\\",\\\" Machine Learning Software\\\",\\\" Network Architecture\\\",\\\" Training\\\",\\\" Visualization (Computer Graphics)\\\",\\\" Computer Graphic Techniques\\\",\\\" Strategy\\\"}\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19009133913476073,\n        \"min\": 2.8,\n        \"max\": 5.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          4.8,\n          4.6,\n          4.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewcount\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 520,\n        \"samples\": [\n          \"894\",\n          \"870\",\n          \"73.7k\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"level\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Beginner \",\n          \"Intermediate \",\n          \"Specialization\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"certificatetype\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Graduate Certificate \",\n          \" Specialization \",\n          \"Mastertrack \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 36,\n        \"samples\": [\n          \" 18 a 24 meses\",\n          \" 6-7 months to complete\",\n          \" 24 - 36 months\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"crediteligibility\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Assessing Data"
      ],
      "metadata": {
        "id": "4-e1b6P8g9I2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "coursera_df.info()"
      ],
      "metadata": {
        "id": "QfrZVGjGg-4m",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d2df2484-eff1-4a11-8dd4-94afe66c0110"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1139 entries, 0 to 1138\n",
            "Data columns (total 9 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   partner            1139 non-null   object \n",
            " 1   course             1139 non-null   object \n",
            " 2   skills             1088 non-null   object \n",
            " 3   rating             993 non-null    float64\n",
            " 4   reviewcount        993 non-null    object \n",
            " 5   level              1004 non-null   object \n",
            " 6   certificatetype    1116 non-null   object \n",
            " 7   duration           1116 non-null   object \n",
            " 8   crediteligibility  1139 non-null   bool   \n",
            "dtypes: bool(1), float64(1), object(7)\n",
            "memory usage: 72.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghitung jumlah nilai yang hilang (NA/null) di setiap kolom\n",
        "coursera_df.isna().sum()"
      ],
      "metadata": {
        "id": "sZZ7fz6jhF1K",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "outputId": "c857e364-d529-4cf4-8535-1f0cdedb456f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "partner                0\n",
              "course                 0\n",
              "skills                51\n",
              "rating               146\n",
              "reviewcount          146\n",
              "level                135\n",
              "certificatetype       23\n",
              "duration              23\n",
              "crediteligibility      0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>partner</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>course</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>skills</th>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <td>146</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviewcount</th>\n",
              "      <td>146</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>level</th>\n",
              "      <td>135</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>certificatetype</th>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration</th>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>crediteligibility</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghitung jumlah baris duplikat dalam dataframe\n",
        "coursera_df.duplicated().sum()"
      ],
      "metadata": {
        "id": "_VojcD6hhwUJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cf4a7eca-06b4-48af-9368-30fa4310a390"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menghitung jumlah nilai unik untuk setiap kolom dalam dataframe\n",
        "coursera_df.nunique()"
      ],
      "metadata": {
        "id": "2jgZ0g5whzNa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 366
        },
        "outputId": "8b05100f-5eec-4289-bc5a-9c5f2182cac2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "partner               180\n",
              "course               1106\n",
              "skills                977\n",
              "rating                 16\n",
              "reviewcount           520\n",
              "level                   7\n",
              "certificatetype         9\n",
              "duration               36\n",
              "crediteligibility       2\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>partner</th>\n",
              "      <td>180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>course</th>\n",
              "      <td>1106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>skills</th>\n",
              "      <td>977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>reviewcount</th>\n",
              "      <td>520</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>level</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>certificatetype</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration</th>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>crediteligibility</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "\n",
        "# Menggabungkan semua nilai di kolom 'skills' (tanpa nilai NaN), memisahkan dengan koma, lalu membagi ke dalam daftar\n",
        "all_skills = coursera_df['skills'].dropna().str.cat(sep=',').split(',')\n",
        "\n",
        "# Membersihkan dan mengonversi setiap skill ke huruf kecil\n",
        "all_skills = [skill.strip().lower() for skill in all_skills]\n",
        "\n",
        "# Menghitung frekuensi setiap skill\n",
        "skill_counts = Counter(all_skills)\n",
        "\n",
        "# Mengambil 10 skill yang paling sering muncul\n",
        "most_common_skills = skill_counts.most_common(10)\n",
        "\n",
        "# Menampilkan hasil\n",
        "print(\"Keyword paling banyak muncul di kolom 'skills':\")\n",
        "for skill, count in most_common_skills:\n",
        "    print(f\"{skill}: {count} kali\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "edLhDPhLjaPT",
        "outputId": "1c41afb5-a2ef-42a6-f4ba-11d60ddc449b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Keyword paling banyak muncul di kolom 'skills':\n",
            "\" leadership and management\": 230 kali\n",
            "\" data analysis\": 212 kali\n",
            "\" strategy\": 178 kali\n",
            "\" strategy and operations\": 168 kali\n",
            "\" critical thinking\": 165 kali\n",
            "\" problem solving\": 163 kali\n",
            "\" computer programming\": 157 kali\n",
            "\" communication\": 155 kali\n",
            "\" business analysis\": 128 kali\n",
            "\" decision making\": 126 kali\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "unique_levels = coursera_df['level'].unique()\n",
        "print(\"Level yang ada:\", unique_levels)\n",
        "\n",
        "level_counts = coursera_df['level'].value_counts()\n",
        "print(\"Jumlah setiap level:\\n\", level_counts)\n",
        "\n",
        "unique_levels_nonan = coursera_df['level'].dropna().unique()\n",
        "print(\"Level yang ada (tanpa NaN):\", unique_levels_nonan)"
      ],
      "metadata": {
        "id": "ovy7SJtgjjKz",
        "outputId": "537b298a-d11f-4205-d2bc-51c9e643929d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Level yang ada: ['Beginner ' 'Intermediate ' 'Advanced ' nan 'Mixed ' 'Course'\n",
            " 'Specialization' 'Degree']\n",
            "Jumlah setiap level:\n",
            " level\n",
            "Beginner          675\n",
            "Intermediate      200\n",
            "Mixed              89\n",
            "Advanced           36\n",
            "Course              2\n",
            "Specialization      1\n",
            "Degree              1\n",
            "Name: count, dtype: int64\n",
            "Level yang ada (tanpa NaN): ['Beginner ' 'Intermediate ' 'Advanced ' 'Mixed ' 'Course'\n",
            " 'Specialization' 'Degree']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Cleaning Data"
      ],
      "metadata": {
        "id": "OFkQM-QW_l-x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "coursera_df.dropna(axis=0,inplace=True)"
      ],
      "metadata": {
        "id": "iZGh-Fz4_nxN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "coursera_df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "riXv-0WI_q_j",
        "outputId": "ef380466-624d-45ba-8542-510b3e145ec5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming 'column_name' is the column you want to convert\n",
        "coursera_df['level'] = coursera_df['level'].astype(str)"
      ],
      "metadata": {
        "id": "wvL9d7hd_urM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "coursera_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F2NYz4XH_xZb",
        "outputId": "32b56699-affd-4cef-8213-6f4e1986c964"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 993 entries, 0 to 1022\n",
            "Data columns (total 9 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   partner            993 non-null    object \n",
            " 1   course             993 non-null    object \n",
            " 2   skills             993 non-null    object \n",
            " 3   rating             993 non-null    float64\n",
            " 4   reviewcount        993 non-null    object \n",
            " 5   level              993 non-null    object \n",
            " 6   certificatetype    993 non-null    object \n",
            " 7   duration           993 non-null    object \n",
            " 8   crediteligibility  993 non-null    bool   \n",
            "dtypes: bool(1), float64(1), object(7)\n",
            "memory usage: 70.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coursera_df['level'] = coursera_df['level'].astype(str)\n",
        "\n",
        "# Menampilkan DataFrame yang diperbarui\n",
        "print(coursera_df[['course', 'level']])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ToHNu-st_01g",
        "outputId": "764d522b-acb6-4899-cb37-113984b0e622"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                               course          level\n",
            "0                                Google Cybersecurity      Beginner \n",
            "1                               Google Data Analytics      Beginner \n",
            "2                          Google Project Management:      Beginner \n",
            "3               Google Digital Marketing & E-commerce      Beginner \n",
            "4                                   Google IT Support      Beginner \n",
            "...                                               ...            ...\n",
            "1018       Interviewing and Resume Writing in English  Intermediate \n",
            "1019                       Strategic Sales Management  Intermediate \n",
            "1020                  Essentials of Corporate Finance  Intermediate \n",
            "1021  Innovation: From Creativity to Entrepreneurship      Beginner \n",
            "1022                Excel for Beginners: Pivot Tables      Beginner \n",
            "\n",
            "[993 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "import pandas as pd\n",
        "from IPython.display import display\n",
        "\n",
        "# Read data\n",
        "coursera_df = pd.read_csv(\"https://raw.githubusercontent.com/ndy-nin/KreasiMLdata/refs/heads/main/data/Coursera.csv\")\n",
        "\n",
        "# Clean 'level' column\n",
        "coursera_df['level'] = coursera_df['level'].str.strip()\n",
        "\n",
        "# Drop rows with missing values in 'level' column\n",
        "coursera_df = coursera_df.dropna(subset=['level'])\n",
        "\n",
        "# Print unique levels after cleaning\n",
        "print(\"Unique levels after cleaning:\", coursera_df['level'].unique())\n",
        "\n",
        "# Define valid levels and filter the dataframe\n",
        "valid_levels = [\"Beginner\", \"Intermediate\", \"Advanced\", \"Mixed\"]\n",
        "coursera_df = coursera_df[coursera_df['level'].isin(valid_levels)]\n",
        "\n",
        "# Initialize LabelEncoder\n",
        "label_encoder = LabelEncoder()\n",
        "\n",
        "# Fit the LabelEncoder with the specified order\n",
        "label_encoder.fit([\"Beginner\", \"Intermediate\", \"Mixed\", \"Advanced\"])\n",
        "\n",
        "# Create a mapping of levels to the correct order\n",
        "level_mapping = {\"Beginner\": 0, \"Intermediate\": 1, \"Mixed\": 2, \"Advanced\": 3}\n",
        "\n",
        "# Transform the 'level' column using the custom mapping\n",
        "coursera_df['level'] = coursera_df['level'].map(level_mapping)\n",
        "\n",
        "# Sort the DataFrame by the 'level' column\n",
        "coursera_df = coursera_df.sort_values(by='level')\n",
        "\n",
        "# Limit the number of rows to display (e.g., top 10 rows)\n",
        "pd.set_option('display.max_rows', 10)\n",
        "\n",
        "# Display the DataFrame neatly (only top 10 rows)\n",
        "display(coursera_df)\n",
        "\n",
        "# If you want to show only the first few rows for a quick overview\n",
        "print(\"\\nTop rows of the cleaned and encoded DataFrame:\")\n",
        "print(coursera_df.head())  # or .tail() for the last 10 rows\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Q7DLyjjgAAIM",
        "outputId": "be82ad09-127d-4685-c101-d033d9fd4f7c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unique levels after cleaning: ['Beginner' 'Intermediate' 'Advanced' 'Mixed' 'Course' 'Specialization'\n",
            " 'Degree']\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                              partner  \\\n",
              "0                              Google   \n",
              "588             Politecnico di Milano   \n",
              "589                              Meta   \n",
              "590  University of California, Irvine   \n",
              "592              IIMA - IIM Ahmedabad   \n",
              "..                                ...   \n",
              "455                   DeepLearning.AI   \n",
              "80                             Google   \n",
              "255                   DeepLearning.AI   \n",
              "621                            Google   \n",
              "718                   DeepLearning.AI   \n",
              "\n",
              "                                              course  \\\n",
              "0                               Google Cybersecurity   \n",
              "588             Artificial Intelligence: an Overview   \n",
              "589                          Social Media Management   \n",
              "590            The Pronunciation of American English   \n",
              "592                               Pre-MBA Statistics   \n",
              "..                                               ...   \n",
              "455    Machine Learning Data Lifecycle in Production   \n",
              "80                      Google Business Intelligence   \n",
              "255   Introduction to Machine Learning in Production   \n",
              "621                          The Power of Statistics   \n",
              "718  Deploying Machine Learning Models in Production   \n",
              "\n",
              "                                                skills  rating reviewcount  \\\n",
              "0    {\" Network Security\",\" Python Programming\",\" L...     4.8       16.4k   \n",
              "588  {\" Machine Learning\",\" Leadership and Manageme...     4.5         185   \n",
              "589  {\" Brand Management\",\" Digital Marketing\",\" Ma...     4.9        4.5k   \n",
              "590                                 {\" Communication\"}     4.8         963   \n",
              "592  {\" Data Analysis\",\" Data Science\",\" General St...     4.5         143   \n",
              "..                                                 ...     ...         ...   \n",
              "455  {\" Python Programming\",\" Statistical Programmi...     4.3         754   \n",
              "80   {\" Business Intelligence\",\" Data Management\",\"...     4.7         940   \n",
              "255  {\" Machine Learning\",\" Applied Machine Learnin...     4.8        2.6k   \n",
              "621  {\" General Statistics\",\" Probability Distribut...     4.8         287   \n",
              "718  {\" Applied Machine Learning\",\" DevOps\",\" Devop...     4.5         288   \n",
              "\n",
              "     level             certificatetype       duration  crediteligibility  \n",
              "0        0   Professional Certificate    3 - 6 Months              False  \n",
              "588      0             Specialization    3 - 6 Months              False  \n",
              "589      0                     Course     1 - 4 Weeks              False  \n",
              "590      0             Specialization    3 - 6 Months              False  \n",
              "592      0                     Course    1 - 3 Months              False  \n",
              "..     ...                         ...            ...                ...  \n",
              "455      3                     Course     1 - 4 Weeks              False  \n",
              "80       3   Professional Certificate    3 - 6 Months              False  \n",
              "255      3                     Course     1 - 4 Weeks              False  \n",
              "621      3                     Course    1 - 3 Months              False  \n",
              "718      3                     Course     1 - 4 Weeks              False  \n",
              "\n",
              "[1000 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8ce08530-778c-4d10-8334-f909828f30ad\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>partner</th>\n",
              "      <th>course</th>\n",
              "      <th>skills</th>\n",
              "      <th>rating</th>\n",
              "      <th>reviewcount</th>\n",
              "      <th>level</th>\n",
              "      <th>certificatetype</th>\n",
              "      <th>duration</th>\n",
              "      <th>crediteligibility</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Google</td>\n",
              "      <td>Google Cybersecurity</td>\n",
              "      <td>{\" Network Security\",\" Python Programming\",\" L...</td>\n",
              "      <td>4.8</td>\n",
              "      <td>16.4k</td>\n",
              "      <td>0</td>\n",
              "      <td>Professional Certificate</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>588</th>\n",
              "      <td>Politecnico di Milano</td>\n",
              "      <td>Artificial Intelligence: an Overview</td>\n",
              "      <td>{\" Machine Learning\",\" Leadership and Manageme...</td>\n",
              "      <td>4.5</td>\n",
              "      <td>185</td>\n",
              "      <td>0</td>\n",
              "      <td>Specialization</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>589</th>\n",
              "      <td>Meta</td>\n",
              "      <td>Social Media Management</td>\n",
              "      <td>{\" Brand Management\",\" Digital Marketing\",\" Ma...</td>\n",
              "      <td>4.9</td>\n",
              "      <td>4.5k</td>\n",
              "      <td>0</td>\n",
              "      <td>Course</td>\n",
              "      <td>1 - 4 Weeks</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>590</th>\n",
              "      <td>University of California, Irvine</td>\n",
              "      <td>The Pronunciation of American English</td>\n",
              "      <td>{\" Communication\"}</td>\n",
              "      <td>4.8</td>\n",
              "      <td>963</td>\n",
              "      <td>0</td>\n",
              "      <td>Specialization</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>592</th>\n",
              "      <td>IIMA - IIM Ahmedabad</td>\n",
              "      <td>Pre-MBA Statistics</td>\n",
              "      <td>{\" Data Analysis\",\" Data Science\",\" General St...</td>\n",
              "      <td>4.5</td>\n",
              "      <td>143</td>\n",
              "      <td>0</td>\n",
              "      <td>Course</td>\n",
              "      <td>1 - 3 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>455</th>\n",
              "      <td>DeepLearning.AI</td>\n",
              "      <td>Machine Learning Data Lifecycle in Production</td>\n",
              "      <td>{\" Python Programming\",\" Statistical Programmi...</td>\n",
              "      <td>4.3</td>\n",
              "      <td>754</td>\n",
              "      <td>3</td>\n",
              "      <td>Course</td>\n",
              "      <td>1 - 4 Weeks</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80</th>\n",
              "      <td>Google</td>\n",
              "      <td>Google Business Intelligence</td>\n",
              "      <td>{\" Business Intelligence\",\" Data Management\",\"...</td>\n",
              "      <td>4.7</td>\n",
              "      <td>940</td>\n",
              "      <td>3</td>\n",
              "      <td>Professional Certificate</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>255</th>\n",
              "      <td>DeepLearning.AI</td>\n",
              "      <td>Introduction to Machine Learning in Production</td>\n",
              "      <td>{\" Machine Learning\",\" Applied Machine Learnin...</td>\n",
              "      <td>4.8</td>\n",
              "      <td>2.6k</td>\n",
              "      <td>3</td>\n",
              "      <td>Course</td>\n",
              "      <td>1 - 4 Weeks</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>621</th>\n",
              "      <td>Google</td>\n",
              "      <td>The Power of Statistics</td>\n",
              "      <td>{\" General Statistics\",\" Probability Distribut...</td>\n",
              "      <td>4.8</td>\n",
              "      <td>287</td>\n",
              "      <td>3</td>\n",
              "      <td>Course</td>\n",
              "      <td>1 - 3 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>718</th>\n",
              "      <td>DeepLearning.AI</td>\n",
              "      <td>Deploying Machine Learning Models in Production</td>\n",
              "      <td>{\" Applied Machine Learning\",\" DevOps\",\" Devop...</td>\n",
              "      <td>4.5</td>\n",
              "      <td>288</td>\n",
              "      <td>3</td>\n",
              "      <td>Course</td>\n",
              "      <td>1 - 4 Weeks</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8ce08530-778c-4d10-8334-f909828f30ad')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8ce08530-778c-4d10-8334-f909828f30ad button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8ce08530-778c-4d10-8334-f909828f30ad');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-08d85b5e-59f0-447d-9bec-b56a13a6ee7a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-08d85b5e-59f0-447d-9bec-b56a13a6ee7a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-08d85b5e-59f0-447d-9bec-b56a13a6ee7a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_387d91c4-fe57-4f7f-a579-76168a35f0e7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('coursera_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_387d91c4-fe57-4f7f-a579-76168a35f0e7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('coursera_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "coursera_df",
              "summary": "{\n  \"name\": \"coursera_df\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"partner\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 159,\n        \"samples\": [\n          \"University of California San Diego\",\n          \"The Pennsylvania State University\",\n          \"University of Western Australia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"course\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 993,\n        \"samples\": [\n          \"Become a CBRS Certified Professional Installer by Google\",\n          \"Think like a CFO\",\n          \"Google IT Automation with Python\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"skills\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 924,\n        \"samples\": [\n          \"{\\\" Computer Networking\\\",\\\" Network Architecture\\\",\\\" Network Model\\\",\\\" Networking Hardware\\\",\\\" Network Security\\\",\\\" Operating Systems\\\",\\\" System Security\\\",\\\" Security Engineering\\\",\\\" Theoretical Computer Science\\\",\\\" Software Security\\\",\\\" Communication\\\",\\\" Computer Architecture\\\",\\\" Strategy and Operations\\\",\\\" Cloud Computing\\\",\\\" Linux\\\"}\",\n          \"{\\\" Machine Learning\\\",\\\" Machine Learning Algorithms\\\",\\\" Artificial Neural Networks\\\",\\\" Data Analysis\\\",\\\" Deep Learning\\\",\\\" Human Learning\\\",\\\" Big Data\\\"}\",\n          \"{\\\" Computer Programming\\\",\\\" User Experience Design\\\"}\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19009133913476062,\n        \"min\": 2.8,\n        \"max\": 5.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          4.8,\n          4.5,\n          4.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewcount\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 520,\n        \"samples\": [\n          \"21.5k\",\n          \"6.6k\",\n          \"933\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"certificatetype\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \" Specialization \",\n          \" Guided Project \",\n          \" Professional Certificate \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \" 1 - 4 Weeks\",\n          \" Less Than 2 Hours\",\n          \" 3 - 6 Months\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"crediteligibility\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Top rows of the cleaned and encoded DataFrame:\n",
            "                              partner                                 course  \\\n",
            "0                              Google                   Google Cybersecurity   \n",
            "588             Politecnico di Milano   Artificial Intelligence: an Overview   \n",
            "589                              Meta                Social Media Management   \n",
            "590  University of California, Irvine  The Pronunciation of American English   \n",
            "592              IIMA - IIM Ahmedabad                     Pre-MBA Statistics   \n",
            "\n",
            "                                                skills  rating reviewcount  \\\n",
            "0    {\" Network Security\",\" Python Programming\",\" L...     4.8       16.4k   \n",
            "588  {\" Machine Learning\",\" Leadership and Manageme...     4.5         185   \n",
            "589  {\" Brand Management\",\" Digital Marketing\",\" Ma...     4.9        4.5k   \n",
            "590                                 {\" Communication\"}     4.8         963   \n",
            "592  {\" Data Analysis\",\" Data Science\",\" General St...     4.5         143   \n",
            "\n",
            "     level             certificatetype       duration  crediteligibility  \n",
            "0        0   Professional Certificate    3 - 6 Months              False  \n",
            "588      0             Specialization    3 - 6 Months              False  \n",
            "589      0                     Course     1 - 4 Weeks              False  \n",
            "590      0             Specialization    3 - 6 Months              False  \n",
            "592      0                     Course    1 - 3 Months              False  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coursera_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "mmDXB8fKALiO",
        "outputId": "bdecf8de-94c8-4167-9f07-f6c6c6595845"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                              partner                                 course  \\\n",
              "0                              Google                   Google Cybersecurity   \n",
              "588             Politecnico di Milano   Artificial Intelligence: an Overview   \n",
              "589                              Meta                Social Media Management   \n",
              "590  University of California, Irvine  The Pronunciation of American English   \n",
              "592              IIMA - IIM Ahmedabad                     Pre-MBA Statistics   \n",
              "\n",
              "                                                skills  rating reviewcount  \\\n",
              "0    {\" Network Security\",\" Python Programming\",\" L...     4.8       16.4k   \n",
              "588  {\" Machine Learning\",\" Leadership and Manageme...     4.5         185   \n",
              "589  {\" Brand Management\",\" Digital Marketing\",\" Ma...     4.9        4.5k   \n",
              "590                                 {\" Communication\"}     4.8         963   \n",
              "592  {\" Data Analysis\",\" Data Science\",\" General St...     4.5         143   \n",
              "\n",
              "     level             certificatetype       duration  crediteligibility  \n",
              "0        0   Professional Certificate    3 - 6 Months              False  \n",
              "588      0             Specialization    3 - 6 Months              False  \n",
              "589      0                     Course     1 - 4 Weeks              False  \n",
              "590      0             Specialization    3 - 6 Months              False  \n",
              "592      0                     Course    1 - 3 Months              False  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aeabd02e-76ac-4a60-9de9-ae5a069b833a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>partner</th>\n",
              "      <th>course</th>\n",
              "      <th>skills</th>\n",
              "      <th>rating</th>\n",
              "      <th>reviewcount</th>\n",
              "      <th>level</th>\n",
              "      <th>certificatetype</th>\n",
              "      <th>duration</th>\n",
              "      <th>crediteligibility</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Google</td>\n",
              "      <td>Google Cybersecurity</td>\n",
              "      <td>{\" Network Security\",\" Python Programming\",\" L...</td>\n",
              "      <td>4.8</td>\n",
              "      <td>16.4k</td>\n",
              "      <td>0</td>\n",
              "      <td>Professional Certificate</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>588</th>\n",
              "      <td>Politecnico di Milano</td>\n",
              "      <td>Artificial Intelligence: an Overview</td>\n",
              "      <td>{\" Machine Learning\",\" Leadership and Manageme...</td>\n",
              "      <td>4.5</td>\n",
              "      <td>185</td>\n",
              "      <td>0</td>\n",
              "      <td>Specialization</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>589</th>\n",
              "      <td>Meta</td>\n",
              "      <td>Social Media Management</td>\n",
              "      <td>{\" Brand Management\",\" Digital Marketing\",\" Ma...</td>\n",
              "      <td>4.9</td>\n",
              "      <td>4.5k</td>\n",
              "      <td>0</td>\n",
              "      <td>Course</td>\n",
              "      <td>1 - 4 Weeks</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>590</th>\n",
              "      <td>University of California, Irvine</td>\n",
              "      <td>The Pronunciation of American English</td>\n",
              "      <td>{\" Communication\"}</td>\n",
              "      <td>4.8</td>\n",
              "      <td>963</td>\n",
              "      <td>0</td>\n",
              "      <td>Specialization</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>592</th>\n",
              "      <td>IIMA - IIM Ahmedabad</td>\n",
              "      <td>Pre-MBA Statistics</td>\n",
              "      <td>{\" Data Analysis\",\" Data Science\",\" General St...</td>\n",
              "      <td>4.5</td>\n",
              "      <td>143</td>\n",
              "      <td>0</td>\n",
              "      <td>Course</td>\n",
              "      <td>1 - 3 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aeabd02e-76ac-4a60-9de9-ae5a069b833a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aeabd02e-76ac-4a60-9de9-ae5a069b833a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aeabd02e-76ac-4a60-9de9-ae5a069b833a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5c1cb503-9109-4268-b410-09019f9af89c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5c1cb503-9109-4268-b410-09019f9af89c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5c1cb503-9109-4268-b410-09019f9af89c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "coursera_df",
              "summary": "{\n  \"name\": \"coursera_df\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"partner\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 159,\n        \"samples\": [\n          \"University of California San Diego\",\n          \"The Pennsylvania State University\",\n          \"University of Western Australia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"course\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 993,\n        \"samples\": [\n          \"Become a CBRS Certified Professional Installer by Google\",\n          \"Think like a CFO\",\n          \"Google IT Automation with Python\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"skills\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 924,\n        \"samples\": [\n          \"{\\\" Computer Networking\\\",\\\" Network Architecture\\\",\\\" Network Model\\\",\\\" Networking Hardware\\\",\\\" Network Security\\\",\\\" Operating Systems\\\",\\\" System Security\\\",\\\" Security Engineering\\\",\\\" Theoretical Computer Science\\\",\\\" Software Security\\\",\\\" Communication\\\",\\\" Computer Architecture\\\",\\\" Strategy and Operations\\\",\\\" Cloud Computing\\\",\\\" Linux\\\"}\",\n          \"{\\\" Machine Learning\\\",\\\" Machine Learning Algorithms\\\",\\\" Artificial Neural Networks\\\",\\\" Data Analysis\\\",\\\" Deep Learning\\\",\\\" Human Learning\\\",\\\" Big Data\\\"}\",\n          \"{\\\" Computer Programming\\\",\\\" User Experience Design\\\"}\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19009133913476062,\n        \"min\": 2.8,\n        \"max\": 5.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          4.8,\n          4.5,\n          4.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewcount\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 520,\n        \"samples\": [\n          \"21.5k\",\n          \"6.6k\",\n          \"933\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"certificatetype\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \" Specialization \",\n          \" Guided Project \",\n          \" Professional Certificate \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \" 1 - 4 Weeks\",\n          \" Less Than 2 Hours\",\n          \" 3 - 6 Months\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"crediteligibility\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Memuat data dari file CSV\n",
        "data = pd.read_csv('https://raw.githubusercontent.com/ndy-nin/KreasiMLdata/refs/heads/main/data/Coursera.csv')\n",
        "\n",
        "# Memisahkan fitur (X) dan target (y)\n",
        "X = data.drop(columns=['level'])  # Ganti 'target_column' dengan nama kolom target Anda\n",
        "y = data['course']\n",
        "\n",
        "# Membagi data menjadi train dan test (80% training, 20% testing)\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "VyQhsGJeAPKU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Mengonversi semua label menjadi string untuk memastikan keseragaman tipe\n",
        "y_train_series = pd.Series(y_train).astype(str)\n",
        "y_test_series = pd.Series(y_test).astype(str)\n",
        "\n",
        "# Gabungkan data pelatihan dan pengujian untuk memastikan semua label terdefinisi\n",
        "y_combined = pd.concat([y_train_series, y_test_series])\n",
        "\n",
        "# Latih LabelEncoder pada label gabungan\n",
        "label_encoder = LabelEncoder()\n",
        "y_combined_encoded = label_encoder.fit_transform(y_combined)\n",
        "\n",
        "# Pisahkan kembali data pelatihan dan pengujian\n",
        "y_train_encoded = y_combined_encoded[:len(y_train)]\n",
        "y_test_encoded = y_combined_encoded[len(y_train):]\n",
        "\n",
        "# Sekarang y_train_encoded dan y_test_encoded dapat digunakan untuk pelatihan dan pengujian"
      ],
      "metadata": {
        "id": "yqhd3tWDAVgV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Periksa ukuran X dan y sebelum membagi\n",
        "print(\"Ukuran X:\", X.shape)\n",
        "print(\"Ukuran y:\", len(y))\n",
        "\n",
        "# Jika perlu, sesuaikan dengan memotong atau menyesuaikan ukuran\n",
        "# Contoh: Pastikan X dan y memiliki jumlah sampel yang sama\n",
        "X = X.iloc[:len(y)]  # Memastikan X memiliki panjang yang sama dengan y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vPLK-J2uAbUY",
        "outputId": "539a2764-01e6-4168-9a6c-51d7bfe55ffd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ukuran X: (1139, 8)\n",
            "Ukuran y: 1139\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import tensorflow as tf\n",
        "import pandas as pd\n",
        "\n",
        "# Memuat dataset\n",
        "data = pd.read_csv(\"https://raw.githubusercontent.com/ndy-nin/KreasiMLdata/refs/heads/main/data/Coursera.csv\")\n",
        "\n",
        "# Encoding kolom 'level' (input) dan 'course' (target)\n",
        "level_encoder = LabelEncoder()\n",
        "course_encoder = LabelEncoder()\n",
        "\n",
        "data['level_encoded'] = level_encoder.fit_transform(data['level'])\n",
        "data['course_encoded'] = course_encoder.fit_transform(data['course'])\n",
        "\n",
        "# Fitur dan target\n",
        "X = data['level_encoded'].values.reshape(-1, 1)\n",
        "y = data['course_encoded'].values\n",
        "\n",
        "# Split data menjadi training dan testing\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Membangun model regresi\n",
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n",
        "    tf.keras.layers.Dense(32, activation='relu'),\n",
        "    tf.keras.layers.Dense(1)  # Output layer untuk regresi\n",
        "])\n",
        "\n",
        "# Kompilasi model\n",
        "model.compile(optimizer='adam', loss='mse', metrics=['mae'])\n",
        "\n",
        "# Variabel untuk jumlah epoch\n",
        "EPOCHS = 100  # Anda bisa mengganti angka ini sesuai kebutuhan\n",
        "\n",
        "# Melatih model\n",
        "history = model.fit(X_train, y_train, epochs=EPOCHS, validation_split=0.2, verbose=1)\n",
        "\n",
        "# Evaluasi model pada data uji\n",
        "test_loss, test_mae = model.evaluate(X_test, y_test, verbose=1)\n",
        "print(f\"Test Loss: {test_loss}, Test MAE: {test_mae}\")\n"
      ],
      "metadata": {
        "id": "gYvt2EIIAkO6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aa8cf831-3760-4a32-ef7f-2ce541a47b17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 420432.3125 - mae: 568.4199 - val_loss: 372167.3438 - val_mae: 521.6462\n",
            "Epoch 2/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 408144.5312 - mae: 561.8856 - val_loss: 371300.2500 - val_mae: 520.7986\n",
            "Epoch 3/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 407551.9688 - mae: 561.7736 - val_loss: 369930.2188 - val_mae: 519.4656\n",
            "Epoch 4/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 388194.4062 - mae: 540.4136 - val_loss: 367885.6875 - val_mae: 517.4919\n",
            "Epoch 5/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 395293.6250 - mae: 545.6886 - val_loss: 364824.8438 - val_mae: 514.5280\n",
            "Epoch 6/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 391707.3125 - mae: 545.6075 - val_loss: 360464.1875 - val_mae: 510.2660\n",
            "Epoch 7/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 389213.9375 - mae: 540.7075 - val_loss: 354568.4062 - val_mae: 504.4150\n",
            "Epoch 8/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 407448.7188 - mae: 560.4002 - val_loss: 346831.0938 - val_mae: 496.5889\n",
            "Epoch 9/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 386727.8125 - mae: 542.7344 - val_loss: 337347.9062 - val_mae: 487.0120\n",
            "Epoch 10/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 371511.3750 - mae: 529.4692 - val_loss: 325903.2188 - val_mae: 476.0399\n",
            "Epoch 11/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 338034.5000 - mae: 499.5437 - val_loss: 312644.8438 - val_mae: 463.2422\n",
            "Epoch 12/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 336129.1250 - mae: 490.2681 - val_loss: 297804.1875 - val_mae: 449.1685\n",
            "Epoch 13/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 320536.1250 - mae: 474.8138 - val_loss: 282196.8750 - val_mae: 433.9512\n",
            "Epoch 14/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 307528.4062 - mae: 469.3828 - val_loss: 265666.0938 - val_mae: 416.8614\n",
            "Epoch 15/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 291455.5938 - mae: 450.2638 - val_loss: 249652.2812 - val_mae: 399.7181\n",
            "Epoch 16/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 260447.2969 - mae: 424.7312 - val_loss: 234619.4531 - val_mae: 384.8119\n",
            "Epoch 17/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 241098.4844 - mae: 399.1653 - val_loss: 221414.6875 - val_mae: 371.9602\n",
            "Epoch 18/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 225984.3438 - mae: 386.9897 - val_loss: 210279.9375 - val_mae: 363.0699\n",
            "Epoch 19/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 213568.2656 - mae: 374.2298 - val_loss: 201652.7031 - val_mae: 355.9808\n",
            "Epoch 20/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 197204.6406 - mae: 353.5423 - val_loss: 195111.3594 - val_mae: 350.2517\n",
            "Epoch 21/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 196825.5781 - mae: 357.5874 - val_loss: 190704.0938 - val_mae: 346.6739\n",
            "Epoch 22/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 189767.0781 - mae: 344.0103 - val_loss: 187891.8438 - val_mae: 345.5102\n",
            "Epoch 23/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 176095.7656 - mae: 329.5142 - val_loss: 186163.3906 - val_mae: 345.2297\n",
            "Epoch 24/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 191803.6719 - mae: 349.6919 - val_loss: 184951.3438 - val_mae: 345.3589\n",
            "Epoch 25/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 170121.3750 - mae: 331.4548 - val_loss: 183978.6250 - val_mae: 345.0724\n",
            "Epoch 26/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 181197.0938 - mae: 342.9743 - val_loss: 183043.4531 - val_mae: 344.8531\n",
            "Epoch 27/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 176288.6719 - mae: 336.6133 - val_loss: 182087.4219 - val_mae: 344.3862\n",
            "Epoch 28/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 181883.9375 - mae: 346.1503 - val_loss: 181152.2031 - val_mae: 343.9088\n",
            "Epoch 29/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 182291.3281 - mae: 343.7748 - val_loss: 180056.7031 - val_mae: 343.1285\n",
            "Epoch 30/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 195637.8125 - mae: 363.2385 - val_loss: 178785.5938 - val_mae: 341.9706\n",
            "Epoch 31/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 179401.5781 - mae: 338.0352 - val_loss: 177696.2656 - val_mae: 341.1886\n",
            "Epoch 32/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 178942.6406 - mae: 340.5818 - val_loss: 176325.6250 - val_mae: 339.8853\n",
            "Epoch 33/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 161338.0156 - mae: 318.9637 - val_loss: 175221.3281 - val_mae: 339.1173\n",
            "Epoch 34/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 163266.5156 - mae: 325.8004 - val_loss: 173702.2500 - val_mae: 337.4959\n",
            "Epoch 35/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 169603.4688 - mae: 338.3677 - val_loss: 172578.9531 - val_mae: 336.8079\n",
            "Epoch 36/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 156945.2031 - mae: 316.0562 - val_loss: 171210.1562 - val_mae: 335.5370\n",
            "Epoch 37/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 160982.5312 - mae: 322.7408 - val_loss: 169908.4531 - val_mae: 334.4390\n",
            "Epoch 38/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 159571.0312 - mae: 319.2484 - val_loss: 168611.6562 - val_mae: 333.3491\n",
            "Epoch 39/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 158784.4531 - mae: 323.0981 - val_loss: 167019.7188 - val_mae: 331.6487\n",
            "Epoch 40/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 154782.3906 - mae: 313.4901 - val_loss: 165918.9688 - val_mae: 331.0013\n",
            "Epoch 41/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 163636.7188 - mae: 325.7102 - val_loss: 164508.5625 - val_mae: 329.7148\n",
            "Epoch 42/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 162630.5469 - mae: 325.0578 - val_loss: 163048.1562 - val_mae: 328.3426\n",
            "Epoch 43/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 152523.4062 - mae: 312.7935 - val_loss: 161482.0938 - val_mae: 326.7303\n",
            "Epoch 44/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 151509.4531 - mae: 316.3539 - val_loss: 160192.1250 - val_mae: 325.7573\n",
            "Epoch 45/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 152840.9531 - mae: 313.3507 - val_loss: 158775.9062 - val_mae: 324.5732\n",
            "Epoch 46/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 135364.0938 - mae: 293.3077 - val_loss: 157315.2344 - val_mae: 323.2760\n",
            "Epoch 47/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 160297.1562 - mae: 326.6144 - val_loss: 155741.0312 - val_mae: 321.8381\n",
            "Epoch 48/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 139292.2344 - mae: 301.6156 - val_loss: 154337.2500 - val_mae: 320.7963\n",
            "Epoch 49/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 142183.6875 - mae: 308.0620 - val_loss: 152858.5938 - val_mae: 319.5294\n",
            "Epoch 50/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 142685.0938 - mae: 307.3652 - val_loss: 151187.1719 - val_mae: 317.9419\n",
            "Epoch 51/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 145906.5625 - mae: 310.8364 - val_loss: 149572.3750 - val_mae: 316.5093\n",
            "Epoch 52/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 143009.3125 - mae: 306.4720 - val_loss: 148032.7344 - val_mae: 315.1977\n",
            "Epoch 53/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 144710.2344 - mae: 310.5751 - val_loss: 146567.1562 - val_mae: 314.0326\n",
            "Epoch 54/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 137681.2812 - mae: 297.9264 - val_loss: 145041.4844 - val_mae: 312.8117\n",
            "Epoch 55/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 129971.8750 - mae: 292.0076 - val_loss: 143262.4219 - val_mae: 311.1491\n",
            "Epoch 56/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 140728.8906 - mae: 306.8629 - val_loss: 141679.0625 - val_mae: 309.8333\n",
            "Epoch 57/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 137061.5625 - mae: 300.8145 - val_loss: 140146.3750 - val_mae: 308.5424\n",
            "Epoch 58/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 138486.3125 - mae: 301.9368 - val_loss: 138539.5938 - val_mae: 307.1165\n",
            "Epoch 59/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 126195.7891 - mae: 289.0403 - val_loss: 137130.5156 - val_mae: 305.9443\n",
            "Epoch 60/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 126129.7500 - mae: 287.1987 - val_loss: 135801.1875 - val_mae: 304.9290\n",
            "Epoch 61/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 123391.8750 - mae: 283.8331 - val_loss: 133898.6562 - val_mae: 302.9831\n",
            "Epoch 62/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 129352.4609 - mae: 293.7011 - val_loss: 132191.5781 - val_mae: 301.3729\n",
            "Epoch 63/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 137520.8281 - mae: 304.4821 - val_loss: 130716.6328 - val_mae: 300.0522\n",
            "Epoch 64/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 114967.4766 - mae: 276.0395 - val_loss: 129287.7344 - val_mae: 298.7059\n",
            "Epoch 65/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 121887.1016 - mae: 280.7736 - val_loss: 127670.3594 - val_mae: 297.0598\n",
            "Epoch 66/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 121782.8203 - mae: 281.4061 - val_loss: 126390.1641 - val_mae: 295.8685\n",
            "Epoch 67/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 126654.1094 - mae: 292.4500 - val_loss: 124641.4766 - val_mae: 293.8683\n",
            "Epoch 68/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 116872.0391 - mae: 278.9745 - val_loss: 123353.6406 - val_mae: 292.5773\n",
            "Epoch 69/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 109837.5547 - mae: 269.2318 - val_loss: 121845.6719 - val_mae: 290.8788\n",
            "Epoch 70/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 111001.5469 - mae: 271.1075 - val_loss: 120499.2969 - val_mae: 289.5657\n",
            "Epoch 71/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 115637.2188 - mae: 280.3997 - val_loss: 119164.8125 - val_mae: 288.2292\n",
            "Epoch 72/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 111878.6641 - mae: 271.5359 - val_loss: 118100.5703 - val_mae: 287.4229\n",
            "Epoch 73/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 112114.0781 - mae: 274.2135 - val_loss: 116646.2734 - val_mae: 285.8868\n",
            "Epoch 74/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 107041.0234 - mae: 266.4099 - val_loss: 115456.2266 - val_mae: 284.8601\n",
            "Epoch 75/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 105963.2500 - mae: 266.1596 - val_loss: 114421.7891 - val_mae: 284.1294\n",
            "Epoch 76/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 115312.3828 - mae: 282.6891 - val_loss: 113447.5625 - val_mae: 283.4764\n",
            "Epoch 77/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 114760.9688 - mae: 277.7722 - val_loss: 112140.2734 - val_mae: 282.1289\n",
            "Epoch 78/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 108263.9141 - mae: 269.7409 - val_loss: 111397.0703 - val_mae: 281.7035\n",
            "Epoch 79/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 105187.6016 - mae: 268.1254 - val_loss: 110615.9219 - val_mae: 281.0864\n",
            "Epoch 80/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 109152.2891 - mae: 274.0407 - val_loss: 109609.5391 - val_mae: 280.1319\n",
            "Epoch 81/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 102121.0391 - mae: 263.0522 - val_loss: 108696.9844 - val_mae: 279.2477\n",
            "Epoch 82/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 98255.2812 - mae: 258.7804 - val_loss: 108089.7812 - val_mae: 278.8901\n",
            "Epoch 83/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 101194.3438 - mae: 263.2408 - val_loss: 107325.2812 - val_mae: 278.2049\n",
            "Epoch 84/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 99623.6250 - mae: 261.7011 - val_loss: 106808.1875 - val_mae: 277.8960\n",
            "Epoch 85/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 99292.3516 - mae: 261.7990 - val_loss: 105933.6641 - val_mae: 276.9545\n",
            "Epoch 86/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 101380.1094 - mae: 267.8888 - val_loss: 105956.2188 - val_mae: 277.3943\n",
            "Epoch 87/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 97235.8359 - mae: 260.8267 - val_loss: 105320.8672 - val_mae: 276.7908\n",
            "Epoch 88/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 94461.9766 - mae: 257.7055 - val_loss: 104801.7734 - val_mae: 276.2885\n",
            "Epoch 89/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 97336.0312 - mae: 261.8956 - val_loss: 104544.9844 - val_mae: 276.1968\n",
            "Epoch 90/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 90777.6094 - mae: 252.6373 - val_loss: 104220.8984 - val_mae: 275.9358\n",
            "Epoch 91/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 93549.2422 - mae: 257.6368 - val_loss: 103897.0469 - val_mae: 275.6385\n",
            "Epoch 92/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 98007.6875 - mae: 266.3206 - val_loss: 103547.0938 - val_mae: 275.2719\n",
            "Epoch 93/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 96956.9453 - mae: 261.9874 - val_loss: 103240.0859 - val_mae: 274.9276\n",
            "Epoch 94/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 98416.4219 - mae: 265.0735 - val_loss: 103115.3438 - val_mae: 274.8456\n",
            "Epoch 95/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 92799.7109 - mae: 258.1917 - val_loss: 103001.5859 - val_mae: 274.7708\n",
            "Epoch 96/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 97899.3203 - mae: 267.5591 - val_loss: 103155.2969 - val_mae: 275.0521\n",
            "Epoch 97/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 96343.9922 - mae: 263.6665 - val_loss: 102604.5391 - val_mae: 274.3048\n",
            "Epoch 98/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 95784.2656 - mae: 262.8709 - val_loss: 102542.1328 - val_mae: 274.2473\n",
            "Epoch 99/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 98003.9688 - mae: 266.9934 - val_loss: 102411.9375 - val_mae: 274.0692\n",
            "Epoch 100/100\n",
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 94640.2734 - mae: 259.4400 - val_loss: 102218.8438 - val_mae: 273.7924\n",
            "\u001b[1m8/8\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 113821.2812 - mae: 298.9268 \n",
            "Test Loss: 110654.3515625, Test MAE: 292.81524658203125\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Exploratory Data Analysis (EDA)"
      ],
      "metadata": {
        "id": "V1VoS07DAnja"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Explore Data"
      ],
      "metadata": {
        "id": "fW7RMLYnAsVD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Menampilkan ringkasan statistik deskriptif termasuk kolom non-numerik\n",
        "coursera_df.describe(include=\"all\")"
      ],
      "metadata": {
        "id": "vAMdxDHSAvDa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "outputId": "40cbae95-657a-4fcf-bf77-43f2c105e1d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       partner             course                  skills      rating  \\\n",
              "count     1000               1000                    1000  993.000000   \n",
              "unique     159                993                     924         NaN   \n",
              "top     Google  Google IT Support  {\" Critical Thinking\"}         NaN   \n",
              "freq        92                  2                       8         NaN   \n",
              "mean       NaN                NaN                     NaN    4.677241   \n",
              "...        ...                ...                     ...         ...   \n",
              "min        NaN                NaN                     NaN    2.800000   \n",
              "25%        NaN                NaN                     NaN    4.600000   \n",
              "50%        NaN                NaN                     NaN    4.700000   \n",
              "75%        NaN                NaN                     NaN    4.800000   \n",
              "max        NaN                NaN                     NaN    5.000000   \n",
              "\n",
              "       reviewcount     level certificatetype       duration crediteligibility  \n",
              "count          993  1000.000            1000           1000              1000  \n",
              "unique         520       NaN               4              4                 2  \n",
              "top           1.9k       NaN         Course    3 - 6 Months             False  \n",
              "freq            16       NaN             499            451               955  \n",
              "mean           NaN     0.486             NaN            NaN               NaN  \n",
              "...            ...       ...             ...            ...               ...  \n",
              "min            NaN     0.000             NaN            NaN               NaN  \n",
              "25%            NaN     0.000             NaN            NaN               NaN  \n",
              "50%            NaN     0.000             NaN            NaN               NaN  \n",
              "75%            NaN     1.000             NaN            NaN               NaN  \n",
              "max            NaN     3.000             NaN            NaN               NaN  \n",
              "\n",
              "[11 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3a84104d-62d7-454c-96a3-36d4e4a5e09c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>partner</th>\n",
              "      <th>course</th>\n",
              "      <th>skills</th>\n",
              "      <th>rating</th>\n",
              "      <th>reviewcount</th>\n",
              "      <th>level</th>\n",
              "      <th>certificatetype</th>\n",
              "      <th>duration</th>\n",
              "      <th>crediteligibility</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>993.000000</td>\n",
              "      <td>993</td>\n",
              "      <td>1000.000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "      <td>1000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>159</td>\n",
              "      <td>993</td>\n",
              "      <td>924</td>\n",
              "      <td>NaN</td>\n",
              "      <td>520</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Google</td>\n",
              "      <td>Google IT Support</td>\n",
              "      <td>{\" Critical Thinking\"}</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.9k</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Course</td>\n",
              "      <td>3 - 6 Months</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>92</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>16</td>\n",
              "      <td>NaN</td>\n",
              "      <td>499</td>\n",
              "      <td>451</td>\n",
              "      <td>955</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.677241</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.486</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.800000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.600000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.700000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.800000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>11 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3a84104d-62d7-454c-96a3-36d4e4a5e09c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3a84104d-62d7-454c-96a3-36d4e4a5e09c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3a84104d-62d7-454c-96a3-36d4e4a5e09c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f200efde-4ac8-4f35-a01b-043b15365c77\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f200efde-4ac8-4f35-a01b-043b15365c77')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f200efde-4ac8-4f35-a01b-043b15365c77 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"coursera_df\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"partner\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          159,\n          \"92\",\n          \"1000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"course\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          993,\n          \"2\",\n          \"1000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"skills\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          924,\n          \"8\",\n          \"1000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 349.73037906410144,\n        \"min\": 0.19009133913476062,\n        \"max\": 993.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.677240684793555,\n          4.7,\n          993.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reviewcount\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          520,\n          \"16\",\n          \"993\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.2876590753862,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          0.486,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"certificatetype\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4,\n          \"499\",\n          \"1000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4,\n          \"451\",\n          \"1000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"crediteligibility\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"955\",\n          \"1000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "coursera_df.groupby(by=\"course\").agg({\n",
        "    \"rating\": [\"max\", \"min\", \"mean\", \"sum\"]\n",
        "})"
      ],
      "metadata": {
        "id": "7bwenEBgA2ff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "outputId": "de8510ef-8cce-47b2-a69f-0439cc86124c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                   rating               \n",
              "                                                      max  min mean  sum\n",
              "course                                                                  \n",
              "(ISC)² Systems Security Certified Practitioner ...    4.7  4.7  4.7  4.7\n",
              ".NET FullStack Developer                              4.3  4.3  4.3  4.3\n",
              "A Crash Course in Causality:  Inferring Causal ...    4.7  4.7  4.7  4.7\n",
              "AI & Law                                              4.8  4.8  4.8  4.8\n",
              "AI Applications in Marketing and Finance              4.7  4.7  4.7  4.7\n",
              "...                                                   ...  ...  ...  ...\n",
              "Write Your First Novel                                4.3  4.3  4.3  4.3\n",
              "Writing in the Sciences                               4.9  4.9  4.9  4.9\n",
              "Étudier en France: French Intermediate course B...    4.8  4.8  4.8  4.8\n",
              "Цифровий маркетинг і електронна комерція від Go...    4.9  4.9  4.9  4.9\n",
              "تحليلات البيانات من Google                            4.8  4.8  4.8  4.8\n",
              "\n",
              "[993 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8589633f-824b-4e1f-989c-0d0023fdb649\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th colspan=\"4\" halign=\"left\">rating</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>max</th>\n",
              "      <th>min</th>\n",
              "      <th>mean</th>\n",
              "      <th>sum</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>course</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>(ISC)² Systems Security Certified Practitioner (SSCP)</th>\n",
              "      <td>4.7</td>\n",
              "      <td>4.7</td>\n",
              "      <td>4.7</td>\n",
              "      <td>4.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>.NET FullStack Developer</th>\n",
              "      <td>4.3</td>\n",
              "      <td>4.3</td>\n",
              "      <td>4.3</td>\n",
              "      <td>4.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A Crash Course in Causality:  Inferring Causal Effects from Observational Data</th>\n",
              "      <td>4.7</td>\n",
              "      <td>4.7</td>\n",
              "      <td>4.7</td>\n",
              "      <td>4.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AI &amp; Law</th>\n",
              "      <td>4.8</td>\n",
              "      <td>4.8</td>\n",
              "      <td>4.8</td>\n",
              "      <td>4.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AI Applications in Marketing and Finance</th>\n",
              "      <td>4.7</td>\n",
              "      <td>4.7</td>\n",
              "      <td>4.7</td>\n",
              "      <td>4.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Write Your First Novel</th>\n",
              "      <td>4.3</td>\n",
              "      <td>4.3</td>\n",
              "      <td>4.3</td>\n",
              "      <td>4.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Writing in the Sciences</th>\n",
              "      <td>4.9</td>\n",
              "      <td>4.9</td>\n",
              "      <td>4.9</td>\n",
              "      <td>4.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Étudier en France: French Intermediate course B1-B2</th>\n",
              "      <td>4.8</td>\n",
              "      <td>4.8</td>\n",
              "      <td>4.8</td>\n",
              "      <td>4.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Цифровий маркетинг і електронна комерція від Google</th>\n",
              "      <td>4.9</td>\n",
              "      <td>4.9</td>\n",
              "      <td>4.9</td>\n",
              "      <td>4.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>تحليلات البيانات من Google</th>\n",
              "      <td>4.8</td>\n",
              "      <td>4.8</td>\n",
              "      <td>4.8</td>\n",
              "      <td>4.8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>993 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8589633f-824b-4e1f-989c-0d0023fdb649')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8589633f-824b-4e1f-989c-0d0023fdb649 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8589633f-824b-4e1f-989c-0d0023fdb649');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9ffadcc1-8cbc-4df5-9a55-c8f5640611c2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9ffadcc1-8cbc-4df5-9a55-c8f5640611c2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9ffadcc1-8cbc-4df5-9a55-c8f5640611c2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"})\",\n  \"rows\": 993,\n  \"fields\": [\n    {\n      \"column\": [\n        \"course\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 993,\n        \"samples\": [\n          \"Tally Bookkeeper\",\n          \"International Humanitarian Law in Theory and Practice\",\n          \"Introduction to Forensic Science\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"rating\",\n        \"max\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19043141582683348,\n        \"min\": 2.8,\n        \"max\": 5.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          4.7,\n          4.3,\n          4.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"rating\",\n        \"min\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1900838947084219,\n        \"min\": 2.8,\n        \"max\": 5.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          4.7,\n          4.3,\n          4.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"rating\",\n        \"mean\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19001192587723761,\n        \"min\": 2.8,\n        \"max\": 5.0,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          4.7,\n          4.6,\n          2.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"rating\",\n        \"sum\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5938067795231017,\n        \"min\": 0.0,\n        \"max\": 9.8,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          4.7,\n          2.8,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "course_levels = coursera_df.groupby('course')['level'].unique().reset_index()\n",
        "course_levels"
      ],
      "metadata": {
        "id": "vj3b01JaA4CH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "25496a37-8128-4160-f4d2-9c46f420a741"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                course level\n",
              "0    (ISC)² Systems Security Certified Practitioner...   [0]\n",
              "1                             .NET FullStack Developer   [1]\n",
              "2    A Crash Course in Causality:  Inferring Causal...   [1]\n",
              "3                                             AI & Law   [0]\n",
              "4             AI Applications in Marketing and Finance   [2]\n",
              "..                                                 ...   ...\n",
              "988                             Write Your First Novel   [0]\n",
              "989                            Writing in the Sciences   [0]\n",
              "990  Étudier en France: French Intermediate course ...   [1]\n",
              "991  Цифровий маркетинг і електронна комерція від G...   [0]\n",
              "992                         تحليلات البيانات من Google   [0]\n",
              "\n",
              "[993 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fd76523c-61ba-4a70-bf7e-a1952022035b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>course</th>\n",
              "      <th>level</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>(ISC)² Systems Security Certified Practitioner...</td>\n",
              "      <td>[0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>.NET FullStack Developer</td>\n",
              "      <td>[1]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>A Crash Course in Causality:  Inferring Causal...</td>\n",
              "      <td>[1]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AI &amp; Law</td>\n",
              "      <td>[0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AI Applications in Marketing and Finance</td>\n",
              "      <td>[2]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>988</th>\n",
              "      <td>Write Your First Novel</td>\n",
              "      <td>[0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>989</th>\n",
              "      <td>Writing in the Sciences</td>\n",
              "      <td>[0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>990</th>\n",
              "      <td>Étudier en France: French Intermediate course ...</td>\n",
              "      <td>[1]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>991</th>\n",
              "      <td>Цифровий маркетинг і електронна комерція від G...</td>\n",
              "      <td>[0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>992</th>\n",
              "      <td>تحليلات البيانات من Google</td>\n",
              "      <td>[0]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>993 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd76523c-61ba-4a70-bf7e-a1952022035b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fd76523c-61ba-4a70-bf7e-a1952022035b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fd76523c-61ba-4a70-bf7e-a1952022035b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0ac5ecf8-16fa-41de-8c83-76ef4b74b6d6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0ac5ecf8-16fa-41de-8c83-76ef4b74b6d6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0ac5ecf8-16fa-41de-8c83-76ef4b74b6d6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_7782ff80-0ef2-4aa5-a4db-e7f6bffb8295\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('course_levels')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7782ff80-0ef2-4aa5-a4db-e7f6bffb8295 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('course_levels');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "course_levels",
              "summary": "{\n  \"name\": \"course_levels\",\n  \"rows\": 993,\n  \"fields\": [\n    {\n      \"column\": \"course\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 993,\n        \"samples\": [\n          \"Tally Bookkeeper\",\n          \"International Humanitarian Law in Theory and Practice\",\n          \"Introduction to Forensic Science\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"level\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Group by 'rating' and get the most frequent course, the number of unique courses, and the total number of courses for each rating\n",
        "course_stats = coursera_df.groupby(by=\"rating\").agg({\n",
        "    \"course\": [\"nunique\", \"count\"],  # Number of unique and total courses\n",
        "    # You might want to add a lambda function to get the most frequent course\n",
        "    # (mode) if that's a relevant statistic for your analysis\n",
        "    #\"course\": lambda x: x.mode()[0]  # Get the most frequent course\n",
        "})\n",
        "course_stats"
      ],
      "metadata": {
        "id": "Z1pTWslnA5dn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "outputId": "e3e7a357-d038-4448-f3ed-f133f5753b8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        course      \n",
              "       nunique count\n",
              "rating              \n",
              "2.8          1     1\n",
              "2.9          1     1\n",
              "3.2          1     1\n",
              "3.3          1     1\n",
              "3.7          1     1\n",
              "...        ...   ...\n",
              "4.6        169   170\n",
              "4.7        298   298\n",
              "4.8        292   292\n",
              "4.9         77    78\n",
              "5.0          3     3\n",
              "\n",
              "[16 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-42bf8a5c-8dbc-4c31-8436-c220b192347a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th colspan=\"2\" halign=\"left\">course</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>nunique</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2.8</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2.9</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3.7</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4.6</th>\n",
              "      <td>169</td>\n",
              "      <td>170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4.7</th>\n",
              "      <td>298</td>\n",
              "      <td>298</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4.8</th>\n",
              "      <td>292</td>\n",
              "      <td>292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4.9</th>\n",
              "      <td>77</td>\n",
              "      <td>78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5.0</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>16 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42bf8a5c-8dbc-4c31-8436-c220b192347a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-42bf8a5c-8dbc-4c31-8436-c220b192347a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-42bf8a5c-8dbc-4c31-8436-c220b192347a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b751f641-c341-420d-ab8d-b579a2303294\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b751f641-c341-420d-ab8d-b579a2303294')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b751f641-c341-420d-ab8d-b579a2303294 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e867e08f-a467-4674-b4bd-7f04f0826195\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('course_stats')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e867e08f-a467-4674-b4bd-7f04f0826195 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('course_stats');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "course_stats",
              "summary": "{\n  \"name\": \"course_stats\",\n  \"rows\": 16,\n  \"fields\": [\n    {\n      \"column\": [\n        \"rating\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7132087118555597,\n        \"min\": 2.8,\n        \"max\": 5.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          2.8,\n          2.9,\n          3.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"course\",\n        \"nunique\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 101,\n        \"min\": 1,\n        \"max\": 298,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          78,\n          1,\n          77\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"course\",\n        \"count\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 101,\n        \"min\": 1,\n        \"max\": 298,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          292,\n          5,\n          78\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Menampilkan kembali informasi dataframe\n",
        "coursera_df.groupby(\"level\").agg(total_usage=(\"course\", \"sum\"))"
      ],
      "metadata": {
        "id": "6V4DZ5lMA7NI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "f1490efd-0814-4d07-de3d-41d58e0ce302"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                             total_usage\n",
              "level                                                   \n",
              "0      Google CybersecurityArtificial Intelligence: a...\n",
              "1      Data Engineering, Big Data, and Machine Learni...\n",
              "2      Introduction to PsychologyPeople AnalyticsITIL...\n",
              "3      Advanced Machine Learning on Google CloudSemic..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e8038ea6-379a-428f-86ac-8f8710b799eb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>total_usage</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>level</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Google CybersecurityArtificial Intelligence: a...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Data Engineering, Big Data, and Machine Learni...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Introduction to PsychologyPeople AnalyticsITIL...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Advanced Machine Learning on Google CloudSemic...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e8038ea6-379a-428f-86ac-8f8710b799eb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e8038ea6-379a-428f-86ac-8f8710b799eb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e8038ea6-379a-428f-86ac-8f8710b799eb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-42cb1942-bc2b-489c-9455-84f0abeeb9b9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-42cb1942-bc2b-489c-9455-84f0abeeb9b9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-42cb1942-bc2b-489c-9455-84f0abeeb9b9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"coursera_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_usage\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Data Engineering, Big Data, and Machine Learning on GCPBlood Film Morphology - A Practical GuideChatGPT for Beginners: Save time with Microsoft ExcelDeveloping Front-End Apps with ReactNeural Networks and Deep LearningNetworking in Google CloudSoftware Development LifecycleSecurity in Google CloudASP.NET for Experienced DevelopersHealth Information Literacy for Data AnalyticsObject Oriented Java Programming: Data Structures and BeyondEssentials of Corporate FinanceDevOps on AWSPython Classes and InheritanceFinanzas corporativasPreparing for Google Cloud Certification: Cloud Data EngineerPreparing for Google Cloud Certification: Cloud Network EngineerMachine LearningDigital HealthStrategic Sales ManagementNatural Language ProcessingDeepLearning.AI TensorFlow DeveloperPreparing for Google Cloud Certification: Cloud ArchitectAccounting Data AnalyticsPython for CybersecurityExpressway to Data Science: Essential MathScience of Diet and ExerciseKotlin for Java DevelopersIBM Introduction to Machine LearningIntroduction to Data Science in PythonInterviewing and Resume Writing in EnglishMicrosoft Azure Security Engineer Associate (AZ-500)Financial ReportingIntroduction to Containers w/ Docker, Kubernetes & OpenShiftRelationship Management and Business DevelopmentTroubles du spectre de l'autisme : diagnosticArchitecting with Google Compute EngineArm Cortex-M Architecture and Software DevelopmentPreparing for Google Cloud Certification: Cloud Security EngineerIBM Machine LearningImmunology: The Immune System and its FailuresDeep Neural Networks with PyTorchPreparing for Google Cloud Certification: Cloud Data Engineer Professional Certificate \\u65e5\\u672c\\u8a9e\\u7248Data Engineering, Big Data and ML on Google Cloud \\u65e5\\u672c\\u8a9e\\u7248Investment Management in an Evolving and Volatile World by HEC Paris and AXA Investment ManagersData Science: Statistics and Machine LearningGoogle Cloud Database EngineerIBM AI EngineeringSchizophreniaSAS Advanced ProgrammerNatural Language Processing with Sequence ModelsIntroduction to LogicIBM Applied DevOps EngineeringA Crash Course in Causality:  Inferring Causal Effects from Observational DataEffective Programming in ScalaPreparing for Google Cloud Certification: Machine Learning EngineerRegulatory ComplianceCAD and Digital ManufacturingDiversity and Inclusion in EducationPreparing for Google Cloud Certification: Cloud DeveloperDeep LearningDeveloping Applications with Google CloudPrecision MedicineExcel Fundamentals for Data AnalysisGenerative AI with Large Language ModelsIntroduction to Financial Engineering and Risk ManagementBuilding Scalable Java Microservices with Spring Boot and Spring CloudProbability Theory: Foundation for Data ScienceHealthier Materials and Sustainable BuildingWater Cooperation and DiplomacyAWS Cloud Solutions ArchitectDeveloping AI Applications with Python and FlaskPython Project: pillow, tesseract, and opencvFinance for Non-Financial ManagersUser Interface DesignHigh Stakes Leadership: Leading in Times of CrisisIntroduction to Medical SoftwareFederal Taxation I: Individuals, Employees, and Sole ProprietorsAlgorithmic ToolboxC++ Programming for Unreal Game DevelopmentPreparing for Google Cloud Certification: Cloud EngineerCreating Business Value with Data and LookerInteraction DesignNatural Language Processing in TensorFlow\\u00c9tudier en France: French Intermediate course B1-B2GPU ProgrammingEntrepreneurial Finance: Strategy and InnovationIntroduction to TensorFlow for Artificial Intelligence, Machine Learning, and Deep LearningIntroduction to CalculusMicrosoft Azure Data Scientist Associate (DP-100)Machine Learning with PythonFundamentals of ImmunologyFunctional Programming in ScalaBusiness Data Management and CommunicationBuild Basic Generative Adversarial Networks (GANs)Sequences, Time Series and PredictionNatural Language Processing with Probabilistic ModelsPython and Statistics for Financial AnalysisPrinciples of Sustainable FinanceIBM Mainframe DeveloperCoaching Skills for ManagersData Visualization with PythonIntroduction to Embedded Systems Software and Development EnvironmentsDeveloping APIs with Google Cloud's Apigee API PlatformLeading: Human Resource Management and LeadershipEmbedding Sensors and MotorsAdvanced Embedded Linux DevelopmentAI for Medical DiagnosisProgramming with Google GoLearn English: Intermediate GrammarAccelerated Computer Science FundamentalsIntellectual Property LawThe Strategy of Content MarketingNatural Language Processing with Classification and Vector SpacesSports Performance AnalyticsMachine Learning on Google CloudElectronic Music ProductionExcel Skills for Data Analytics and VisualizationSpanish for Successful Communication in Healthcare SettingsExploratory Data Analysis for Machine LearningAutodesk CAD/CAM/CAE for Mechanical EngineeringMeta AR DeveloperAlgorithms for Battery Management SystemsBusiness English Communication SkillsFPGA Design for Embedded SystemsBayesian StatisticsSix Sigma Green BeltSoftware Testing and AutomationNeuroscience and NeuroimagingPower ElectronicsSequence ModelsDecentralized Finance (DeFi): The Future of FinanceTransforming the Fashion BusinessPython Project for Data ScienceData Science Foundations: Statistical InferenceWeb Applications for EverybodyPostgreSQL for EverybodyTensorFlow: Data and DeploymentHealthy and Sustainable Foods and ProductsFinancial ManagementConvolutional Neural NetworksMusic Education for TeachersInstructional Methods in Health Professions EducationValue Chain ManagementIntroduction to Mathematical ThinkingSix Sigma Black BeltEmotional Intelligence: Cultivating Immensely Human InteractionsSite Reliability Engineering: Measuring and Managing ReliabilityIBM z/OS Mainframe PractitionerModern Robotics:  Mechanics, Planning, and ControlOrganizational LeadershipBlockchainMachine Learning for TradingConvolutional Neural Networks in TensorFlowJava FullStack DeveloperHealthcare LawAI for MedicineCompetitive Strategy and Organization DesignImproving Deep Neural Networks: Hyperparameter Tuning, Regularization and OptimizationInternational Business EssentialsCybersecurityDivide and Conquer, Sorting and Searching, and Randomized AlgorithmsFinancial Engineering and Risk ManagementSports MarketingAuditing I: Conceptual Foundations of AuditingGenerative Adversarial Networks (GANs)Excel Skills for Business: Intermediate IInspired LeadershipIntroduction to Deep Learning & Neural Networks with KerasAlgorithmsGenomic Data ScienceU.S. Federal TaxationObject-Oriented Data Structures in C++Mergers and AcquisitionsVisualizing the Living Body: Diagnostic ImagingHow Things Work: An Introduction to PhysicsNatural Language Processing with Attention ModelsData Collection and Processing with PythonFundamentals of Reinforcement LearningData Analytics in the Public Sector with RTensorFlow: Advanced TechniquesAdvanced Business AnalyticsMachine Learning and Reinforcement Learning in FinanceLinux and Private Cloud Administration on IBM Power SystemsObject Oriented ProgrammingNuts and Bolts of U.S. Immigration LawMicrosoft Azure Data Engineering Associate (DP-203)Future Ready CompanyCore JavaBusiness Analytics with Excel: Elementary to AdvancedData Science with Databricks for Data AnalystsReinforcement LearningEssentials in Clinical Simulations Across the Health ProfessionsCustomer Experiences with Contact Center AI - Dialogflow ESApplied Data Science with PythonOrganizational Leadership in Diversity, Equity & Inclusion.NET FullStack DeveloperData Structures and AlgorithmsIntroduction to Machine LearningCorporate & Commercial Law I: Contracts & Employment Law\",\n          \"Advanced Machine Learning on Google CloudSemiconductor DevicesAdvanced Data Science with IBMProbabilistic Graphical ModelsFoundations of Data Structures and AlgorithmsFoundations of Data ScienceSelf-Driving CarsSocial and Economic Networks:  Models and AnalysisAutodesk Certified Professional: Revit for Architectural Design Exam PrepMLOps | Machine Learning OperationsSoftware Architecture for Big DataAnalyze Datasets and Train ML Models using AutoMLSpark, Hadoop, and Snowflake for Data EngineeringThe Nuts and Bolts of Machine LearningMedical NeuroscienceRegression Analysis: Simplify Complex Data RelationshipsAdvanced Valuation and Strategy - M&A, Private Equity, and Venture CapitalData Warehousing for Business IntelligenceOptical EngineeringDecisions, Decisions: Dashboards and ReportsMachine Learning Modeling Pipelines in ProductionGet Started with PythonMachine Learning Engineering for Production (MLOps)Learn English: Advanced Grammar and PunctuationGo Beyond the Numbers: Translate Data into InsightsAutodesk Certified Professional: AutoCAD for Design and Drafting Exam PrepPractical Data Science on the AWS CloudAntibiotic StewardshipGoogle Advanced Data AnalyticsThe Path to Insights: Data Models and PipelinesFoundations of Business IntelligenceMachine Learning Data Lifecycle in ProductionGoogle Business IntelligenceIntroduction to Machine Learning in ProductionThe Power of StatisticsDeploying Machine Learning Models in Production\",\n          \"Google CybersecurityArtificial Intelligence: an OverviewSocial Media ManagementThe Pronunciation of American EnglishPre-MBA StatisticsVivre avec le TDAH \\u00e0 travers les \\u00e2gesHands-on Introduction to Linux Commands and Shell ScriptingAn Introduction to Programming the Internet of Things (IOT)Sales and CRM OverviewHarnessing the Power of Data with Power BIIntroductory C ProgrammingFinding Your Professional Voice: Confidence & ImpactCreative Thinking: Techniques and Tools for SuccessLeading Diverse Teams & OrganizationsInternational Organizations ManagementFundamentals of ComputingGetting Started with Git and GitHubAssets in AccountingAI and Public HealthIA generativa en el aulaIntroduction to User Experience DesignFundamentos de la ciberseguridadSatisfaction Guaranteed: Develop Customer Loyalty OnlineMiracles of Human Language: An Introduction to LinguisticsMarketing en redes sociales de MetaHotel Management: Distribution, Revenue and Demand ManagementThe Science of Well-Being for TeensAbnormal PsychologyFundraising and DevelopmentFinance for Non-Finance ProfessionalsEngineering Project ManagementRobotic Process Automation (RPA)ESG Risks and OpportunitiesConstruction Project ManagementIntroduction to Computers and Operating Systems and SecurityMachine Learning Foundations for Product ManagersFractal Data ScienceProgramming with JavaScriptDriving business towards the Sustainable Development GoalsPositive Psychology: Martin E. P. Seligman\\u2019s Visionary ScienceFinancial Accounting FundamentalsMarketing StrategyScience of ExerciseC Programming with LinuxCybersecurity Attack and Defense FundamentalsMarketing AnalyticsElectric Industry Operations and MarketsBusiness Strategies for A Better WorldIntroduction to Biology: Ecology, Evolution, & BiodiversityUsing Python to Interact with the Operating SystemIntegrative Health and MedicineDataOps MethodologyIntroduction to Computer Science and ProgrammingCybersecurity Roles, Processes & Operating System SecurityVersion ControlBecome a Journalist: Report the News!Professionalism in Allied HealthPython, Bash and SQL Essentials for Data EngineeringTally BookkeeperIntroduction to Programming with MATLABAmerican Contract Law IWireshark for Beginners: Capture PacketsStrategic Management and InnovationComputational Social ScienceCompTIA a+_ cyberFundamentals of GISMaking ArchitectureD\\u00e9veloppement psychologique de l'enfantAspectos b\\u00e1sicos del dise\\u00f1o de la experiencia del usuarioIntroduction to Clinical DataGame Design and Development with Unity 2020Terrorism and Counterterrorism: Comparing Theory and PracticeSuporte em TI do GoogleC# Programming for Unity Game DevelopmentPalliative Care AlwaysMathematics for Machine Learning: Linear AlgebraIELTS PreparationHow to Play GuitarDatabases for Data ScientistsIntroduction to Python ProgrammingContabilidad para no contadoresConcepts, Strategies, and Analytics in Performance Marketing and Digital AdvertisingProject Management: Foundations and InitiationImproving Communication SkillsMarketing Mix ImplementationIndustrial BiotechnologySAS Visual Business AnalyticsFundamentos del marketing digital y comercio electr\\u00f3nicoInformation\\u200b \\u200bSystemsFundamentals of Machine Learning for HealthcareLearn to Program: The FundamentalsAI For Everyone \\uff08\\u3059\\u3079\\u3066\\u306e\\u4eba\\u306e\\u305f\\u3081\\u306eAI\\u30ea\\u30c6\\u30e9\\u30b7\\u30fc\\u8b1b\\u5ea7\\uff09Introduction to English Common LawSocial Media Marketing in PracticeFinance for Technical ManagersPython Functions, Files, and DictionariesSAP Professional FundamentalsHealthcare IT SupportSocial PsychologyBuild Dynamic User Interfaces (UI) for WebsitesGetting Started with Power BI DesktopProbability & Statistics for Machine Learning & Data ScienceAWS Cloud Technical EssentialsMarket ResearchCoding for Everyone: C and C++Overcoming DyslexiaFundamentals of Graphic DesignDigital Manufacturing & Design TechnologyPractical Guide to TradingHealth InformaticsIntroduction to Software EngineeringCorporate StrategyDigital Technologies and the Future of ManufacturingGame Design: Art and ConceptsWork Smarter with Microsoft ExcelManagerial Accounting FundamentalsLearn Spanish: Basic Spanish VocabularyUnderstanding Clinical Research: Behind the StatisticsExtended Reality for EverybodyStrategic Leadership: Impact, Change, and Decision-MakingDigital Product Management: Modern FundamentalsGoogle \\u30b5\\u30a4\\u30d0\\u30fc\\u30bb\\u30ad\\u30e5\\u30ea\\u30c6\\u30a3Google Project Management (PT)Music ProductionGIS, Mapping, and Spatial AnalysisInternational Humanitarian Law in Theory and PracticeBiostatistics in Public HealthFoundational Finance for Strategic Decision MakingStatistical Analysis with R for Public HealthRenewable EnergyAn Introduction to Consumer Neuroscience & NeuromarketingTESOL Certificate, Part 2: Teach English Now!Fundamentals of AccountingUser Experience Research and DesignGoodwill\\u00ae Career Coach and NavigatorFutures ThinkingSchool Health for Children and AdolescentsFirst Step KoreanAssess for Success: Marketing Analytics and MeasurementIntroduction to Data EngineeringCancer BiologyBusiness AnalyticsData Management for Clinical ResearchData Analysis with RBehavioral FinanceIntroduction to Cyber SecurityGoogle Data Analytics (DE)Design a User Experience for Social Good & Prepare for JobsFundamentos de la gesti\\u00f3n de proyectosManaging CybersecurityPython Data StructuresCybersecurity Operations FundamentalsMicrosoft Azure Data Fundamentals DP-900 Exam PrepReporting extra-financier et strat\\u00e9gie RSE\\u062a\\u062d\\u0644\\u064a\\u0644\\u0627\\u062a \\u0627\\u0644\\u0628\\u064a\\u0627\\u0646\\u0627\\u062a \\u0645\\u0646 GoogleIntroduction to DevOpsComputational Thinking for Problem SolvingAlgebra: Elementary to AdvancedCulture-Driven Team BuildingPython Programming FundamentalsMusic BusinessOrganizational Change and Culture for Adopting Google CloudProfessional Skills for the WorkplaceIntroduction to Public Relations and the MediaInformation Systems Auditing, Controls and AssuranceInternational Marketing & Cross Industry GrowthAgile LeadershipProgramming in C++: A Hands-on IntroductionInnovation: From Creativity to EntrepreneurshipCustomer Experiences with Contact Center AI - Dialogflow CXIntroduction to Web Development with HTML, CSS, JavaScriptInvestment and Portfolio ManagementAspectos b\\u00e1sicos: Datos, datos, en todas partesProject PlanningMake the Sale: Build, Launch, and Manage E-commerce StoresAI, Business & the Future of WorkClimate Change and Sustainable InvestingEpidemiology in Public Health PracticeIntroduction to Large Language ModelsExcel to MySQL: Analytic Techniques for BusinessLearn English: Beginning GrammarSongwriting: Writing, Arranging, and Producing MusicGoogle Cloud Fundamentals: Core InfrastructureIntroductory Human PhysiologyBecome an EMTCustomer Service FundamentalsChild Nutrition and CookingMedical TerminologyFundamentals of Flight mechanicsUsing Public Policy for Social ChangeDigital Transformation Using AI/ML with Google CloudSales Operations/ManagementThe Fundamentals of Personal FinanceFirst Principles of Computer VisionReact BasicsIntroduction to High-Performance and Parallel ComputingFinTech: Finance Industry Transformation and RegulationLearning and DevelopmentAlexander Technique: Balanced Posture for Ease and ComfortReal-World Cloud Product ManagementClaves de la Direcci\\u00f3n de EmpresasAnalysing: Numeric and digital literaciesFundamentals of Social Media AdvertisingImage Processing for Engineering and ScienceBig DataMastering Final Cut ProRefugees in the 21st CenturyIntroduction to Scrum Master TrainingImproving Leadership & Governance in Nonprofit OrganizationsDirecci\\u00f3n y Gesti\\u00f3n de NegociosCybersecurity Compliance Framework & System AdministrationFoundations of Global HealthBuilding No-Code Apps with AppSheetData Modeling in Power BIEthical LeadershipCoding for Beginners: An Easy IntroductionUnderstanding Basic SQL SyntaxClinical Terminology for International and U.S. StudentsComputational NeuroscienceWine Tasting: Sensory Techniques for Wine AnalysisBattery TechnologiesAndroid App DevelopmentInspiring and Motivating IndividualsWeight Management: Beyond Balancing CaloriesEveryday Parenting: The ABCs of Child RearingDise\\u00f1o Instruccional: Aprendizaje activo y Pedagog\\u00eda digitalFinancial Technology (Fintech) InnovationsFinancial Planning for Young AdultsData-driven Decision MakingIntroduction to Back-End DevelopmentVisual Elements of User Interface DesignMedical Terminology and the Human Body FundamentalsIntroduction to Microsoft Azure Cloud ServicesIntroduction to Logic and Critical ThinkingSocial Media MarketingEveryday Excel, Part 1Strategy and SustainabilitySleep: Neurobiology, Medicine, and SocietyWrite A Feature Length Screenplay For Film Or TelevisionChildren's Human Rights - An Interdisciplinary Introduction\\u0426\\u0438\\u0444\\u0440\\u043e\\u0432\\u0438\\u0439 \\u043c\\u0430\\u0440\\u043a\\u0435\\u0442\\u0438\\u043d\\u0433 \\u0456 \\u0435\\u043b\\u0435\\u043a\\u0442\\u0440\\u043e\\u043d\\u043d\\u0430 \\u043a\\u043e\\u043c\\u0435\\u0440\\u0446\\u0456\\u044f \\u0432\\u0456\\u0434 GoogleFoundations of Data Science: K-Means Clustering in PythonBlockchain Revolution in Financial ServicesDiversit\\u00e9 et inclusion sur le lieu de travailIntroduction to Industrial Bioprocess DevelopmentFoundations of Software Testing and ValidationResponsive Website Development and DesignWeb3 and Blockchain in Global CommerceGenAI for EveryoneFormal Financial AccountingCost and Economics in Pricing StrategyIntroduction to Public SpeakingEssentials of Management and Strategic PlanningGlobal Energy and Climate PolicyMarketing DigitalFundamentals of Technology SalesAboriginal Worldviews and EducationEntrepreneurship Strategy: From Ideation to ExitThe hidden value \\u2013 Lean in manufacturing and servicesSpreadsheets for Beginners using Google SheetsAI and Climate ChangeBusiness and Marketing StrategiesProfessional Selling: 3 Steps to High-PerformanceInnovation Through Design: Think, Make, Break, RepeatNegotiationsDrug DiscoveryConflict ManagementPolitics and Economics of International EnergyPenetration Testing, Incident Response and ForensicsEnglish Composition IGender Analytics: Gender Equity through Inclusive DesignManagerial Economics and Business AnalysisIntroduction to Systems EngineeringFoundations of Business StrategyEpidemiology for Public HealthMachine Learning for AllMedical Billing and Coding EssentialsEvaluations of AI Applications in HealthcareCyber Security FundamentalsIntroduction to Git and GitHubDiversity and Inclusion for HR ProfessionalsAI Foundations: Prompt Engineering with ChatGPTGlobal Diplomacy: the United Nations in the WorldAdvertising with MetaIntroduction to Cybersecurity & Risk ManagementBusiness Models For SustainabilityFinTech Law and PolicyIntroduction to Scripting in PythonSQL for Data ScienceAkamai Network EngineeringGenerative AI: Introduction and ApplicationsWrite Your First NovelSupply Chain LogisticsBusiness Sustainability in the Circular EconomyEnglish for Business and EntrepreneurshipHealth Behavior Change: From Evidence to ActionIntroduction to Web DevelopmentLinear Algebra from Elementary to AdvancedMemoir and Personal Essay: Write About YourselfUsing Python to Access Web DataEuropean Business LawInnovation ManagementFoundations of Public Health PracticeMarketing digital e e-commerce do GoogleDeveloping Your MusicianshipDino 101: Dinosaur PaleobiologyAI Strategy and GovernanceRust FundamentalsExtract, Transform and Load Data in Power BIIntroduction to Responsible AIAn Introduction to Accessibility and Inclusive DesignLearn Chinese: HSK Test PreparationUncommon Sense TeachingIntroduction to Computer Vision and Image ProcessingUnderstanding Einstein: The Special Theory of RelativityNegotiation, Mediation and Conflict ResolutionIntroduction to Agile Development and ScrumFundamentals of Music TheoryPwC GST Taxation ExecutiveProject Management Foundations, Initiation, and PlanningGoogle Cloud Big Data and Machine Learning FundamentalsFinancial Acumen for Non-Financial ManagersIntroduction to Finance: The BasicsCompTIA a+_ networkDesign of ExperimentsSecurity and Privacy for Big Data - Part 1Excel for Beginners: Introduction to SpreadsheetsLearning Linux for LFCA CertificationIntroduction to AI in the Data CenterGenerative AI PrimerOmnichannel Retail StrategyExcel/VBA for Creative Problem SolvingFrom Excel to Power BITOEFL PreparationEquine Welfare and ManagementMicrosoft Azure AI Fundamentals AI-900 Exam PrepIntroduction to Financial Analysis - The \\\"Why?\\\"Statistics with PythonCircular Economy - Sustainable Materials ManagementExecutive Data ScienceSocial Work Practice: Advocating Social Justice and ChangeAccounting: Principles of Financial AccountingSales Training for High Performing TeamsGoogle IT Support (Deutsch)Solar Energy BasicsAdministraci\\u00f3n de EmpresasGetting Started with AI using IBM WatsonFinTech: Foundations, Payments, and RegulationsTrading Strategies in Emerging MarketsDesarrollador front-end de MetaMindfulness and Well-beingMarketing with TikTokGestion de projet de GoogleIntroduction to Hardware and Operating SystemsAddiction Treatment: Clinical Skills for Healthcare ProvidersData Science Math SkillsBiology Meets Programming: Bioinformatics for BeginnersThe Arts and Science of Relationships: Understanding Human NeedsIntroduction to Operations ManagementData Visualization & Dashboarding with RIntroduction to Technical SupportMicrosoft Power Platform FundamentalsIntroduction to Good Clinical PracticeSecurity and Privacy for Big Data - Part 2An Introduction to American LawLearning for a Sustainable FutureDigital Marketing Strategy and PlanningCuranderismo: Traditional Healing Using PlantsWhole genome sequencing of bacterial genomes - tools and applicationsAstronomy: Exploring Time and SpaceMarine BiologyInclusive Leadership: The Power of Workplace DiversityQualitative Research Design and Methods for Public HealthSuicide PreventionUnderstanding child development: from synapse to societyNarrative EconomicsDigital Transformation in Financial ServicesData LiteracyBuilding AI Powered Chatbots Without ProgrammingFrom Data to Insights with Google CloudPatient SafetyMicroeconomics PrinciplesIntroducci\\u00f3n a la programaci\\u00f3n en Python I: Aprendiendo a programar con PythonIntroduction to Google SEOAkamai Customer Consulting and SupportIntroduction to Front-End DevelopmentBlockchain RevolutionExcel for Beginners: Pivot TablesTableau Business Intelligence AnalystSAP Technology ConsultantApplied Data Science with RThe Bits and Bytes of Computer NetworkingStanford Introduction to Food and HealthCiberseguridad de GoogleGoogle Project ManagementFinancial MarketsArtificial Intelligence in MarketingConnect and Protect: Networks and Network SecurityHRCI Human Resource AssociateIntroduction to Cloud ComputingClinical Trials OperationsBusiness AnalyticsProject Management Principles and PracticesConnected LeadershipTESOL Certificate, Part 1: Teach English Now!Data Analysis with R ProgrammingGoogle Professional Workspace AdministratorProgramming for Everybody (Getting Started with Python)Leading the Modern Day BusinessMicrosoft 365 FundamentalsShare Data Through the Art of VisualizationPrepare Data for ExplorationSound the Alarm: Detection and ResponseMicrosoft Azure Fundamentals AZ-900 Exam PrepAn\\u00e1lisis de Datos de GoogleProject ManagementUI / UX DesignFoundations of ManagementBookkeeping BasicsScrum Master CertificationAdvanced Learning AlgorithmsFinancial Analysis - Skills for SuccessFrom Likes to Leads: Interact with Customers OnlineGame TheorySoporte de Tecnolog\\u00edas de la Informaci\\u00f3n de GoogleCreative WritingMicrosoft Cybersecurity AnalystBrand Management: Aligning Business, Brand and BehaviourMeta iOS DeveloperRemoving Barriers to ChangeGoogle Cloud Digital Leader TrainingSAS ProgrammerManagement ConsultingMeta Back-End DeveloperFoundations of User Experience (UX) DesignMATLAB Programming for Engineers and ScientistsStrategic Leadership and ManagementSoftware Design and ArchitectureEffective Communication: Writing, Design, and PresentationScrum MasterInvestment Management with Python and Machine LearningAcademic English: WritingPython 3 ProgrammingManaging Emotions in Times of Uncertainty & StressGoogle Data AnalyticsIntroduction to Cybersecurity Tools & Cyber AttacksJava Programming and Software Engineering FundamentalsInfluencing: Storytelling, Change Management and GovernanceMeta Database EngineerAsk Questions to Make Data-Driven DecisionsAutomate Cybersecurity Tasks with PythonProject Initiation: Starting a Successful ProjectIT Security: Defense against the digital dark artsIntuit Academy BookkeepingProcess Data from Dirty to CleanBuild Wireframes and Low-Fidelity PrototypesMethods and Statistics in Social SciencesAI For BusinessPricing Strategy OptimizationModern and Contemporary Art and DesignBusiness and Financial ModelingIntroduction to HealthcareCapstone: Applying Project Management in the Real WorldCareer SuccessGesti\\u00f3n de Proyectos de GoogleDigital Product ManagementOrganizational AnalysisAssets, Threats, and VulnerabilitiesCybers\\u00e9curit\\u00e9 GoogleDise\\u00f1o de Experiencia del Usuario (UX) de GoogleMedical Billing and Coding FundamentalsGoogle Marketing Digital e E-CommerceSupply Chain ManagementMathematics for Machine LearningSecurity Analyst FundamentalsData Analysis and Presentation Skills: the PwC ApproachSalesforce Sales OperationsConstruction ManagementLeading People and TeamsFundamentals of Project Planning and ManagementIntroduction to PsychologyLearn SQL Basics for Data ScienceThe Business of Health CareAWS FundamentalsAI for GoodIntroduction to StatisticsCertified in CybersecurityOperating Systems and You: Becoming a Power UserLinear Algebra for Machine Learning and Data ScienceGenerative AI FundamentalsChatGPT Advanced Data AnalysisBusiness StrategyDigital MarketingArizona State University TESOLData ScienceEntrepreneurshipUnsupervised Learning, Recommenders, Reinforcement LearningIntroduction to Generative AINoSQL, Big Data, and Spark FoundationsPython for Data Science, AI & DevelopmentAI Product ManagementIntroduction to Data AnalyticsCrash Course on PythonSearch Engine Optimization (SEO)Play It Safe: Manage Security RisksAnalyze Data to Answer QuestionsData Science: Foundations using RPharmacy Technician FundamentalsTools of the Trade: Linux and SQLTools for Data ScienceThe Materiality of ESG FactorsGeographic Information Systems  (GIS)Human Resource Management: HR for People ManagersImprove Your English Communication SkillsGoogle Data Analytics (PT)Leadership SkillsGraphic DesignProject Management & Other Tools for Career DevelopmentProduct Ideation, Design, and ManagementExcel Basics for Data AnalysisModern Project ManagementUCI Project ManagementGetting started with Google WorkspaceSoftware Product ManagementAttract and Engage Customers with Digital MarketingPreparing for Google Cloud Certification: Cloud DevOps EngineerThink like a CFOMeta Marketing AnalyticsOKR Certification: Leadership and Goal SettingWhat is Data Science?Introduction to Artificial Intelligence (AI)Achieving Personal and Professional SuccessPeople and Soft Skills for Professional and Personal SuccessStart the UX Design Process: Empathize, Define, and IdeateFintech: Foundations & Applications of Financial TechnologySystem Administration and IT Infrastructure ServicesWriting in the SciencesSuccessful Negotiation: Essential Strategies and SkillsArchitecting with Google Kubernetes EngineAWS Cloud Technology ConsultantIntroduction to Programming with Python and JavaProject Planning: Putting It All TogetherEntrepreneurship: Growing Your BusinessFoundations of Positive Psychology(ISC)\\u00b2 Systems Security Certified Practitioner (SSCP)Meta Android DeveloperIntroduction to Social Media MarketingMeta Front-End DeveloperObject Oriented Programming in JavaDevOps, Cloud, and Agile FoundationsApplied Software Engineering FundamentalsThe Art of Visual StorytellingExcel Skills for BusinessIBM Applied AIEthics, Technology and EngineeringThe DIY MusicianApplied Data ScienceReducing Gun Violence in America: Evidence for ChangeIBM Back-End DevelopmentMicrosoft Windows Defender and Firewall for BeginnersData Engineering FoundationsInnovative Teaching with ChatGPTData Analysis with PythonSalesforce Sales Development RepresentativeInternational Women's Health and Human RightsCloud Application Development FoundationsGoogle \\u30c7\\u30fc\\u30bf\\u30a2\\u30ca\\u30ea\\u30c6\\u30a3\\u30af\\u30b9Python BasicsGoogle IT Automation with PythonThink Outside the Inbox: Email MarketingDesign ThinkingGood with Words: Writing and EditingGoogle UX Design (DE)IBM IT Project ManagerAnatomyThe Business of Music ProductionIBM IT SupportDynamic Public SpeakingFundamentals of FinanceRoboticsAgile DevelopmentExcel Skills for Business: EssentialsFoundations of Project ManagementFoundations: Data, Data, EverywhereIBM AI Foundations for BusinessData Analysis and Visualization FoundationsIBM Data Analytics with Excel and RIBM Data AnalystCreate High-Fidelity Designs and Prototypes in FigmaGoogle UX DesignAI & LawThe Singer SongwriterBusiness Statistics and AnalysisIBM Data ScienceBusiness Value and Project ManagementGoogle IT SupportLearning How to Learn: Powerful mental tools to help you master tough subjectsGoogle UX Design (PT)Talent AcquisitionGoogle Project Management:Supply Chain AnalyticsHuman Anatomy and Medical Terminology FundamentalsGoogle Data AnalyticsGoogle Digital Marketing & E-commerceMachine LearningIntroduction to Data ScienceGenerative AI for EveryoneIBM Data EngineeringData Visualization and Dashboards with Excel and CognosIBM & Darden Digital StrategyAWS Cloud Practitioner EssentialsGoogle UX DesignEveryday ExcelBioinformaticsFood Sustainability, Mindful Eating, and Healthy CookingCalculus for Machine Learning and Data ScienceWork Smarter with Microsoft WordData Science MethodologyData Science Fundamentals with Python and SQLGoogle IT SupportKey Technologies for BusinessIBM Full Stack Software DeveloperIBM DevOps and Software EngineeringPhotography Basics and Beyond: From Smartphone to DSLRPreparing  Data for Analysis with Microsoft ExcelInformation Technology (IT) and Cloud FundamentalsFoundations of CybersecurityMeta React NativeIBM Project ManagerGoogle Data Analytics Capstone: Complete a Case StudyInvestment ManagementIT Fundamentals for CybersecurityMathematics for Machine Learning and Data SciencePython for EverybodyStructuring Machine Learning ProjectsAgile with Atlassian JiraPrompt EngineeringCybersecurity for EveryoneRisk ManagementGoogle Project Management (DE)Project Execution: Running the ProjectMeta Social Media MarketingIBM IT Scrum MasterFoundations of Digital Marketing and E-commerceBranding: The Creative JourneyPut It to Work: Prepare for Cybersecurity JobsDiversity and inclusion in the workplaceDrug Development Product ManagementPrompt Engineering for ChatGPTSix Sigma Yellow BeltUnderstanding the Brain: The Neurobiology of Everyday LifeFinance & Quantitative Modeling for AnalystsDatabases and SQL for Data Science with PythonIntroduction to Finance and AccountingProject LaunchIntroduction to Discrete Mathematics for Computer ScienceAI in HealthcareIntroduction to BusinessReal-World Product ManagementAI Foundations for EveryoneAgile Project ManagementBI Foundations with SQL, ETL and Data WarehousingIBM Data Warehouse EngineerData Visualization with TableauConduct UX Research and Test Early ConceptsGlobal Procurement and SourcingMicrosoft Power BI Data AnalystAI For EveryoneSupervised Machine Learning: Regression and ClassificationIBM Front-End DeveloperWeb Design for Everybody: Basics of Web Development & CodingTechnical Support FundamentalsIBM Cybersecurity AnalystIntroduction to Project ManagementBusiness Foundations\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# analisis korelasi\n",
        "import seaborn as sns\n",
        "sns.heatmap(df.corr(), annot=True, cmap='coolwarm')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 556
        },
        "id": "cGJwYtrXExKI",
        "outputId": "32dc2da1-84c4-4ac9-880e-a1255852c907"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Konversi kolom 'skills' menjadi string\n",
        "df['skills'] = df['skills'].astype(str)"
      ],
      "metadata": {
        "id": "HMsJVNOrFagf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# analisis fitur teks atau kategori\n",
        "from collections import Counter\n",
        "\n",
        "# Pastikan kolom 'skills' ada\n",
        "if 'skills' in df.columns:\n",
        "    # Pastikan kolom 'skills' tidak kosong\n",
        "    if not df['skills'].dropna().empty:\n",
        "        # Gabungkan teks dalam kolom 'skills', pisahkan dengan koma\n",
        "        all_skills = df['skills'].dropna().str.cat(sep=',').split(',')\n",
        "\n",
        "        # Bersihkan dan ubah menjadi huruf kecil\n",
        "        all_skills = [skill.strip().lower() for skill in all_skills]\n",
        "\n",
        "        # Hitung frekuensi kemunculan setiap skill\n",
        "        skill_counts = Counter(all_skills)\n",
        "\n",
        "        # Tampilkan 10 skill yang paling sering muncul\n",
        "        print(skill_counts.most_common(10))\n",
        "    else:\n",
        "        print(\"Kolom 'skills' kosong setelah menghapus NaN.\")\n",
        "else:\n",
        "    print(\"Kolom 'skills' tidak ditemukan dalam dataset.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gdnJhzRHFH1H",
        "outputId": "e06a72ba-ac83-4a14-8a02-d404bba535c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[('315', 8), ('830', 8), ('229', 8), ('595', 5), ('275', 5), ('213', 4), ('711', 4), ('836', 4), ('807', 3), ('502', 3)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Preprocessing"
      ],
      "metadata": {
        "id": "s6s0P03HFhk2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# encoding data kategori\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "df['level_encoded'] = le.fit_transform(df['level'])"
      ],
      "metadata": {
        "id": "EYkveFGzGe3V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# scaling dan normalisasi\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)"
      ],
      "metadata": {
        "id": "1-3rTvb2GjoP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# balancing\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.utils.validation import check_X_y\n",
        "\n",
        "# 1. Imputasi nilai kosong\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X = imputer.fit_transform(X)  # Pastikan tidak ada NaN\n",
        "\n",
        "# 2. Validasi dan pastikan X dan y sesuai format\n",
        "X, y = check_X_y(X, y, accept_sparse=False, dtype='float64')\n",
        "\n",
        "# 3. Gunakan SMOTE untuk menangani ketidakseimbangan kelas\n",
        "smote = SMOTE(random_state=42)\n",
        "X_balanced, y_balanced = smote.fit_resample(X, y)\n",
        "\n",
        "# 4. Periksa hasil\n",
        "from collections import Counter\n",
        "print(f\"Distribusi kelas sebelum: {Counter(y)}\")\n",
        "print(f\"Distribusi kelas setelah: {Counter(y_balanced)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1GUMgH-gGtNF",
        "outputId": "c6ef66d2-2433-4f30-a17d-c3030d086621"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Distribusi kelas sebelum: Counter({0: 675, 1: 200, 2: 89, 3: 36})\n",
            "Distribusi kelas setelah: Counter({0: 675, 1: 675, 3: 675, 2: 675})\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# membagi dataset\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "TP1-ac4oH9Mv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import json\n",
        "\n",
        "# 1. Periksa tipe data kolom 'skills'\n",
        "print(coursera_df['skills'].head())\n",
        "\n",
        "# 2. Bersihkan nilai kosong dan tangani format JSON-like\n",
        "def process_skills(value):\n",
        "    if isinstance(value, str):  # Periksa jika value adalah string\n",
        "        try:\n",
        "            # Ganti kutipan tunggal dengan kutipan ganda untuk JSON parsing\n",
        "            value = value.replace(\"'\", \"\\\"\")\n",
        "            return json.loads(value)\n",
        "        except (json.JSONDecodeError):\n",
        "            # Jika JSON tidak valid, kembalikan nilai kosong\n",
        "            return {}\n",
        "    else:\n",
        "        # Jika value bukan string, anggap sebagai data kosong\n",
        "        return {}\n",
        "\n",
        "# Terapkan fungsi untuk membersihkan kolom 'skills'\n",
        "coursera_df['skills'] = coursera_df['skills'].fillna(\"{}\").apply(process_skills)\n",
        "\n",
        "# 3. Menemukan Semua Keterampilan Unik\n",
        "all_skills = set()\n",
        "coursera_df['skills'].apply(lambda x: all_skills.update(x.keys()) if isinstance(x, dict) else None)\n",
        "\n",
        "# 4. Membuat Kolom Baru untuk Setiap Keterampilan\n",
        "for skill in all_skills:\n",
        "    coursera_df[skill] = coursera_df['skills'].apply(lambda x: x.get(skill, 0) if isinstance(x, dict) else 0)\n",
        "\n",
        "# 5. Mengganti Nama Kolom 'Course' Menjadi 'All Courses'\n",
        "coursera_df.rename(columns={\"Course\": \"All Courses\"}, inplace=True)\n",
        "\n",
        "# 6. Menghapus Kolom JSON Asli\n",
        "coursera_df.drop(columns=['skills'], inplace=True)\n",
        "\n",
        "# 7. Menampilkan DataFrame Hasil\n",
        "print(coursera_df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NlCtzC5yITo5",
        "outputId": "e08e8956-af1f-43a1-dcd1-f45183b7ccb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    689\n",
            "1    363\n",
            "2    726\n",
            "3    421\n",
            "4    237\n",
            "Name: skills, dtype: int64\n",
            "   partner  course  rating  reviewcount  level  certificatetype  duration  \\\n",
            "0       37     430     4.8           75      1                2         2   \n",
            "1       37     431     4.8           50      1                2         2   \n",
            "2       37     444     4.8          515      1                2         2   \n",
            "3       37     435     4.8          138      1                2         2   \n",
            "4       37     437     4.8          107      1                2         2   \n",
            "\n",
            "   crediteligibility  level_numeric  \n",
            "0              False              0  \n",
            "1               True              0  \n",
            "2               True              0  \n",
            "3              False              0  \n",
            "4               True              0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# cross validation dan grid search untuk akurasi model\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "# Gunakan RandomForest atau model lainnya yang lebih kompleks\n",
        "rf_model = RandomForestClassifier(random_state=42)\n",
        "\n",
        "# Lakukan Cross-Validation untuk mendapatkan estimasi yang lebih akurat\n",
        "cv_scores = cross_val_score(rf_model, X, y, cv=5)  # 5-fold cross-validation\n",
        "print(f\"Cross-validation accuracy: {cv_scores.mean()}\")\n",
        "\n",
        "# Tuning hyperparameter menggunakan Grid Search\n",
        "param_grid = {\n",
        "    'n_estimators': [100, 200, 300],\n",
        "    'max_depth': [10, 20, 30],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "}\n",
        "\n",
        "grid_search = GridSearchCV(rf_model, param_grid, cv=5, n_jobs=-1)\n",
        "grid_search.fit(X, y)\n",
        "\n",
        "print(f\"Best Parameters: {grid_search.best_params_}\")\n",
        "print(f\"Best Cross-validation Accuracy: {grid_search.best_score_}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mOzCapu_JF5M",
        "outputId": "a11a1bf2-8386-4163-ebfe-0c5bcaf7b72c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cross-validation accuracy: 0.673\n",
            "Best Parameters: {'max_depth': 10, 'min_samples_split': 10, 'n_estimators': 300}\n",
            "Best Cross-validation Accuracy: 0.678\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# pake neural network\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, Input\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "# Membuat model Neural Network dengan lebih banyak lapisan\n",
        "model = Sequential([\n",
        "    Input(shape=(X_train.shape[1],)),\n",
        "    Dense(256, activation='relu'),\n",
        "    Dropout(0.3),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dropout(0.3),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(4, activation='softmax')  # Output 4 kelas\n",
        "])\n",
        "\n",
        "# Compile model\n",
        "optimizer = Adam(learning_rate=0.0001)\n",
        "model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Melatih model dengan lebih banyak epochs dan data augmentasi jika diperlukan\n",
        "model.fit(X_train, y_train, epochs=30, batch_size=32, validation_data=(X_test, y_test))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nw4199aOJ1O0",
        "outputId": "6d8652c2-95d2-4d4f-861f-1661b3ec827b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step - accuracy: 0.4600 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 2/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6840 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 3/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6913 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 4/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6609 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 5/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6802 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 6/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6974 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 7/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6886 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 8/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6917 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 9/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6590 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 10/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6785 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 11/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6691 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 12/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6776 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 13/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6754 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 14/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6884 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 15/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6767 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 16/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6868 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 17/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6755 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 18/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6692 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 19/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6706 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 20/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6787 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 21/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6855 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 22/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6916 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 23/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6484 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 24/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6686 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 25/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6857 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 26/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7031 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 27/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6690 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 28/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6589 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 29/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6890 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 30/30\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6848 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7d1b7b4b1f00>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, Input\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "# Step 1: Load the Dataset\n",
        "df = pd.read_csv('https://raw.githubusercontent.com/ndy-nin/KreasiMLdata/refs/heads/main/data/Coursera.csv')\n",
        "\n",
        "# Step 2: Map the 'level' column to numeric values\n",
        "level_mapping = {\"Beginner\": 0, \"Intermediate\": 1, \"Mixed\": 2, \"Advanced\": 3}\n",
        "df['level_numeric'] = df['level'].str.strip().map(level_mapping)\n",
        "\n",
        "# Handle invalid or missing values in the 'level_numeric' column\n",
        "df = df[df['level_numeric'].notnull()]  # Remove rows with invalid mappings\n",
        "df['level_numeric'] = df['level_numeric'].astype(int)\n",
        "\n",
        "# Step 3: Handle Categorical Columns\n",
        "categorical_columns = df.select_dtypes(include=['object']).columns\n",
        "label_encoders = {}\n",
        "for col in categorical_columns:\n",
        "    le = LabelEncoder()\n",
        "    df[col] = le.fit_transform(df[col])\n",
        "    label_encoders[col] = le  # Store the encoder\n",
        "\n",
        "# Step 4: Prepare Features (X) and Target (y)\n",
        "X = df.drop(columns=['level', 'level_numeric']).values\n",
        "y = df['level_numeric'].values\n",
        "\n",
        "# Step 5: Split the Dataset\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 6: Scale the Features\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)\n",
        "\n",
        "# Step 7: Build the Model with Input Layer\n",
        "model = Sequential([\n",
        "    Input(shape=(X_train.shape[1],)),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dropout(0.2),  # Reduced dropout to prevent excessive regularization\n",
        "    Dense(64, activation='relu'),\n",
        "    Dropout(0.2),  # Reduced dropout\n",
        "    Dense(4, activation='softmax')  # 4 classes: Beginner, Intermediate, Mixed, Advanced\n",
        "])\n",
        "\n",
        "# Step 8: Compile the Model\n",
        "optimizer = Adam(learning_rate=0.0005)  # Adjusted learning rate\n",
        "model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Step 9: Train the Model\n",
        "epochs = 20\n",
        "model.fit(X_train, y_train, epochs=epochs, batch_size=32, validation_data=(X_test, y_test))\n",
        "\n",
        "# Step 10: Evaluate the Model\n",
        "loss, accuracy = model.evaluate(X_test, y_test)\n",
        "print(f\"Test Loss: {loss}\")\n",
        "print(f\"Test Accuracy: {accuracy}\")\n",
        "\n",
        "# Step 11: Create a Function to Provide Course Recommendations Based on Level\n",
        "def get_course_recommendations(level):\n",
        "    # Map the numeric level to its string equivalent\n",
        "    level_mapping = {0: \"Beginner\", 1: \"Intermediate\", 2: \"Mixed\", 3: \"Advanced\"}\n",
        "    user_level = level_mapping.get(level, \"Invalid level\")\n",
        "\n",
        "    if user_level == \"Invalid level\":\n",
        "        return \"Invalid level. Please choose from 0, 1, 2, or 3.\"\n",
        "\n",
        "    # Filter the dataset to match the user's level\n",
        "    recommended_courses = df[df['level_numeric'] == level][['course', 'level']].head(5)  # Limit to top 5 courses\n",
        "    course_list = recommended_courses[['course', 'level']].values.tolist()\n",
        "\n",
        "    # Create a readable string for courses with their corresponding levels\n",
        "    recommendation_text = f\"Recommended Courses for {user_level}:\\n\"\n",
        "    for course, level in course_list:\n",
        "        recommendation_text += f\"- {course} (Level: {level_mapping[level]})\\n\"\n",
        "\n",
        "    return recommendation_text\n",
        "\n",
        "# Step 12: Get User Input for Course Recommendations (Numeric Input)\n",
        "try:\n",
        "    user_input = int(input(\"Enter your level (0: Beginner, 1: Intermediate, 2: Mixed, 3: Advanced): \").strip())\n",
        "\n",
        "    if user_input in level_mapping:\n",
        "        print(get_course_recommendations(user_input))\n",
        "    else:\n",
        "        print(\"Invalid input. Please enter a valid level (0, 1, 2, 3).\")\n",
        "except ValueError:\n",
        "    print(\"Invalid input. Please enter a valid integer (0, 1, 2, 3).\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A4bN9TkPIl6y",
        "outputId": "a5bdf918-1d40-4925-832e-d5e1064afd02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 20ms/step - accuracy: 0.6295 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 2/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.6827 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 3/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.6600 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 4/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.6711 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 5/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.6760 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 6/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.6785 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 7/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.6561 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 8/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.6908 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 9/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.6946 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 10/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6902 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 11/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6843 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 12/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6889 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 13/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6898 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 14/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6885 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 15/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6688 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 16/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6862 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 17/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6731 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 18/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6773 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 19/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7025 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 20/20\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7084 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6707 - loss: nan \n",
            "Test Loss: nan\n",
            "Test Accuracy: 0.6650000214576721\n",
            "Enter your level (0: Beginner, 1: Intermediate, 2: Mixed, 3: Advanced): 1\n",
            "Invalid input. Please enter a valid level (0, 1, 2, 3).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# mencoba pake metode random forest\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Fit the model\n",
        "rf_model = RandomForestClassifier(random_state=42)\n",
        "rf_model.fit(X_train, y_train)\n",
        "\n",
        "# Prediksi dan evaluasi\n",
        "y_pred = rf_model.predict(X_test)\n",
        "print(f\"Random Forest Accuracy: {accuracy_score(y_test, y_pred)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y8c29m_OLesc",
        "outputId": "4d880a3c-714e-4835-9f24-aaaccfe2f9b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest Accuracy: 0.65\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# pake metode XGBoost\n",
        "import xgboost as xgb\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Fit the XGBoost model\n",
        "xgb_model = xgb.XGBClassifier(random_state=42)\n",
        "xgb_model.fit(X_train, y_train)\n",
        "\n",
        "# Prediksi dan evaluasi\n",
        "y_pred = xgb_model.predict(X_test)\n",
        "print(f\"XGBoost Accuracy: {accuracy_score(y_test, y_pred)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ladwed2xL_sD",
        "outputId": "254e39c2-c16f-4362-8eb5-6ae66d331b52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "XGBoost Accuracy: 0.665\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# pake metode monitor learning curve\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))\n",
        "\n",
        "# Plot Learning Curves\n",
        "plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Learning Curves')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "n4uB-EQqMK6v",
        "outputId": "1885439b-5b82-4675-f600-183238a548ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.6895 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 2/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.6796 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 3/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.6770 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 4/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.6760 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 5/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.7015 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 6/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - accuracy: 0.6744 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 7/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.6632 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 8/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.6608 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 9/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - accuracy: 0.6927 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 10/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.6954 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 11/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.6749 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 12/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.6535 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 13/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 15ms/step - accuracy: 0.6929 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 14/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.6647 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 15/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.6608 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 16/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 0.6704 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 17/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.6799 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 18/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.6762 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 19/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.6732 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 20/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - accuracy: 0.6640 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 21/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.6870 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 22/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.6727 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 23/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 17ms/step - accuracy: 0.6607 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 24/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 15ms/step - accuracy: 0.6959 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 25/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - accuracy: 0.6601 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 26/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.6685 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 27/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.6831 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 28/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.6880 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 29/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.6636 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 30/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - accuracy: 0.6650 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 31/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6709 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 32/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.7001 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 33/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6799 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 34/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6862 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 35/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6590 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 36/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6866 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 37/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6613 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 38/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6775 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 39/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6655 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 40/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6825 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 41/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6766 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 42/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6801 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 43/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6805 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 44/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6977 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 45/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.6771 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 46/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6903 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 47/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6837 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 48/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6502 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 49/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6801 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n",
            "Epoch 50/50\n",
            "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.7060 - loss: nan - val_accuracy: 0.6650 - val_loss: nan\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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Hj0KY2NjdOjQQaE8PT0d6enpaNeunUJ5cb2HDx++9lpERET07qlRgcre3h4xMTGQSCTysoiICKioqMDGxqbUdkZGRmjbti1iYmIUymNiYqChoaEUuFJSUvDHH38oLUYHAD09PTRo0AB///23QnlsbKz8WkRERESvqlFrqFxcXLB9+3Z4e3vDy8sLycnJCAgIgIuLi8IeVO7u7khKSkJUVJS8zNfXF1OnTsWyZcvQq1cv3LhxAyEhIfDw8ICmpqbCdcLCwiCVSpWm+wBAJBJhzJgx2LVrF7S1teVrqIKCgvDBBx8o7W1FREREVONejhwXF4clS5bgypUr0NLSwtChQ+Hr66uwT5SbmxsSExNx6tQphbZhYWHYsGED7t+/D319fTg7O8PT01NpEfnIkSOhoqKC/fv3l9iH/Px8hISE4Ndff0VSUhIaNWqE7t27w9fXV2lj0PIoKpJyHyoiIqJa5OU+VG+e0KtxgaouY6AiIiKqXcoaqGrUGioiIiKi2oiBioiIiEggBioiIiIigWrUp/yo/GQyGfILpNXdDSIiomqlXk+lWt9kwkBVi8lkMizfcRl3E0t/zyEREdG7wKS5DuZ82rXaQhWn/Go7vlaQiIio2nHbhLeoKrZN4JQfERFR1U35lXXbBE751XIikQj11VWruxtERETvNE75EREREQnEQEVEREQkEAMVERERkUAMVEREREQCMVARERERCcRARURERCQQAxURERGRQAxURERERAIxUBEREREJxEBFREREJBADFREREZFADFREREREAjFQEREREQnEQEVEREQkEAMVERERkUAMVEREREQCMVARERERCcRARURERCQQAxURERGRQAxURERERAIxUBEREREJxEBFREREJBADFREREZFADFREREREAjFQEREREQnEQEVEREQkEAMVERERkUAMVEREREQCMVARERERCcRARURERCQQAxURERGRQAxURERERALVuEAVFxeHCRMmwNzcHDY2NggICEB+fn6Z2iYnJ2P27NmwsrKCmZkZnJyccOTIEfnxwMBAmJqalvi1YMEChXNJpVJs3boV/fv3R6dOnWBjY4Mvv/yyUu+ViIiI6ga16u7AqzIyMuDu7o5WrVohMDAQycnJ8Pf3R25urlLg+a+UlBQ4OzujdevWWLJkCbS1tXHnzh2FMDZ69GjY2dkptLt06RJW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78q/X7p0KaysrODn5wcrKyv0798fP/zwA/7++2/8+uuvFbs5IiIiqrNqVKAyNjZWWiuVmZmJ1NRUpbVVrzIxMXntefPy8gAAH3zwwRvrAC/3wmrXrp3CcUNDQzRq1AgPHz587bWIiIjo3VOjApW9vT1iYmIgkUjkZREREVBRUYGNjU2p7YyMjNC2bVvExMQolMfExEBDQ0MeuGxtbVGvXr0S63Xs2FH+/XvvvYe///5boU5iYiKePXsGIyOjCt8fERER1U01ag2Vi4sLtm/fDm9vb3h5eSE5ORkBAQFwcXFR2IPK3d0dSUlJiIqKkpf5+vpi6tSpWLZsGXr16oUbN24gJCQEHh4e0NTUBAA0adIEbm5uWLt2LUQiEdq0aYNjx47h6tWr2LJli0I/vv32WyxduhQODg54/vw5Nm7ciMaNG8PJyentPRAiIiKqFUSyGraxUlxcHJYsWYIrV65AS0sLQ4cOha+vL9TV1eV13NzckJiYiFOnTim0DQsLw4YNG3D//n3o6+vD2dkZnp6eCvtJFRYWYuPGjdi/fz/S09PRpk0bfP755+jTp4+8jkwmw549e7B7924kJCRAS0sL5ubm8PX1RZs2bSp8b0VFUqSnZ1e4PREREb1denpaUFV984RejQtUdRkDFRERUe1S1kBVo9ZQEREREdVGDFREREREAjFQEREREQnEQEVEREQkEAMVERERkUAMVEREREQCMVARERERCcRARURERCQQAxURERGRQAxURERERAIxUBEREREJxEBFREREJBADFREREZFADFREREREAjFQEREREQnEQEVEREQkEAMVERERkUAMVEREREQCMVARERERCcRARURERCQQAxURERGRQAxURERERAIxUBEREREJxEBFREREJBADFREREZFADFREREREAjFQEREREQnEQEVEREQkEAMVERERkUAMVEREREQCMVARERERCcRARURERCQQAxURERGRQAxURERERAIxUBEREREJxEBFREREJBADFREREZFADFREREREAjFQEREREQnEQEVEREQkEAMVERERkUA1LlDFxcVhwoQJMDc3h42NDQICApCfn1+mtsnJyZg9ezasrKxgZmYGJycnHDlyRKne1atXMX78eHTp0gVdu3bFmDFjcOvWLaV6v/zyC4YNG4bOnTuje/fumDhxInJzcwXfIxEREdUt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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}